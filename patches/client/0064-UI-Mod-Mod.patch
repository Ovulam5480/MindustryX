From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MinRi2 <2275045670@qq.com>
Date: Wed, 1 May 2024 18:29:42 +0800
Subject: [PATCH] =?UTF-8?q?UI:=20=E6=8E=A8=E8=8D=90Mod=E9=A1=B5=E9=9D=A2;?=
 =?UTF-8?q?=E9=87=8D=E7=BD=AEMod=E9=A1=B5=E9=9D=A2?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 core/assets/bundles/bundle-mdtx.properties    |  19 ++
 core/assets/recommendMods.json                |  17 ++
 core/src/mindustry/ui/dialogs/ModsDialog.java | 264 +++++++++++-------
 core/src/mindustryX/features/UIExt.java       |   1 +
 .../features/ui/ModsRecommendDialog.java      | 264 ++++++++++++++++++
 5 files changed, 462 insertions(+), 103 deletions(-)
 create mode 100644 core/assets/recommendMods.json
 create mode 100644 core/src/mindustryX/features/ui/ModsRecommendDialog.java

diff --git a/core/assets/bundles/bundle-mdtx.properties b/core/assets/bundles/bundle-mdtx.properties
index c341ed754cdc92da0bd15594c0db772a94b39211..ef8cd05c12526ae5724b976b3d656ff298260c06 100644
--- a/core/assets/bundles/bundle-mdtx.properties
+++ b/core/assets/bundles/bundle-mdtx.properties
@@ -1,3 +1,22 @@
+#UI
+mods.group.mod = 模组
+mods.group.internal = 内置模组
+mods.disabled = 禁用Mod
+
+mods.recommend = [accent]MdtX[]推荐辅助模组列表
+mods.recommend.lastUpdated = 推荐列表更新时间：{0}
+mods.recommend.info = 经过精选的辅助模组
+mods.recommend.mod.description = 经过精选的推荐模组
+mods.recommend.mod.name = 模组：{0}
+mods.recommend.mod.author = 作者: {0}
+mods.recommend.mod.minGameVersion = 最低支持游戏版本：{0}
+mods.recommend.mod.lastUpdated = 上次更新时间：{0}
+mods.recommend.mod.stars = Github收藏数：{0}
+
+alphaLoading = {jump}[gray]加载中...
+alphaLoadFailed = {sick}[gray]加载失败...
+#end UI
+
 status.slow.name = 缓慢
 status.shielded.name = 保护
 status.corroded.name = 腐蚀
diff --git a/core/assets/recommendMods.json b/core/assets/recommendMods.json
new file mode 100644
index 0000000000000000000000000000000000000000..b76b9baf860869ae75a8f3387e9827a55defab90
--- /dev/null
+++ b/core/assets/recommendMods.json
@@ -0,0 +1,17 @@
+{
+  "lastUpdated": "2024/4/12 21:00",
+  "modRecommend": [
+    {
+      "repo": "eb-wilson/toomanyitems",
+      "reason": "Too Many Items(TMI)类似Minecraft的JEL物品管理器\n提供了检索物品、单位、方块、电力、热量的用途以及获取途径"
+    },
+    {
+      "repo": "mnemotechnician/new-console",
+      "reason": "NewConsole提供了新的控制台，方便调试者执行js代码\n1.保存js代码的执行记录\n2.读写简单js文件"
+    },
+    {
+      "repo": "way-zer/contentstweaker",
+      "reason": "ContentsTweaker(CT)允许地图调整内容、添加UI等"
+    }
+  ]
+}
\ No newline at end of file
diff --git a/core/src/mindustry/ui/dialogs/ModsDialog.java b/core/src/mindustry/ui/dialogs/ModsDialog.java
index cfc64166ab474960ad13e1784605e9078c33d16e..5a4e034deba4bb29890ffd5edcd1ecdbd685e519 100644
--- a/core/src/mindustry/ui/dialogs/ModsDialog.java
+++ b/core/src/mindustry/ui/dialogs/ModsDialog.java
@@ -1,6 +1,7 @@
 package mindustry.ui.dialogs;
 
 import arc.*;
+import arc.Files.*;
 import arc.files.*;
 import arc.func.*;
 import arc.graphics.*;
@@ -27,6 +28,8 @@ import mindustry.io.*;
 import mindustry.mod.*;
 import mindustry.mod.Mods.*;
 import mindustry.ui.*;
+import mindustryX.features.*;
+import mindustryX.features.ui.*;
 
 import java.text.*;
 import java.util.*;
@@ -44,6 +47,12 @@ public class ModsDialog extends BaseDialog{
 
     private BaseDialog browser;
     private Table browserTable;
+
+    private final Seq<LoadedMod> internalMods = new Seq<>(), otherMods = new Seq<>();
+    private String modQuery;
+    private final Table modPane;
+
+    private float modCardWidth, modCardHeight = 110f;
     private float scroll = 0f;
 
     public ModsDialog(){
@@ -51,6 +60,7 @@ public class ModsDialog extends BaseDialog{
         addCloseButton();
 
         browser = new BaseDialog("@mods.browser");
+        modPane = new Table().margin(10f).top();
 
         browser.cont.table(table -> {
             table.left();
@@ -143,8 +153,19 @@ public class ModsDialog extends BaseDialog{
     }
 
     void setup(){
-        float h = 110f;
-        float w = Math.min(Core.graphics.getWidth() / Scl.scl(1.05f), 520f);
+        modCardWidth = Math.min(Core.graphics.getWidth() / Scl.scl(1.05f), 520f);
+
+        Seq<LoadedMod> modList = mods.list();
+        internalMods.clear();
+        otherMods.clear();
+
+        for(LoadedMod mod : modList){
+            if(mod.root.type() == FileType.internal){
+                internalMods.add(mod);
+            }else{
+                otherMods.add(mod);
+            }
+        }
 
         cont.clear();
         cont.defaults().width(Math.min(Core.graphics.getWidth() / Scl.scl(1.05f), 556f)).pad(4);
@@ -153,9 +174,9 @@ public class ModsDialog extends BaseDialog{
 
         cont.table(buttons -> {
             buttons.left().defaults().growX().height(60f).uniformX();
+            buttons.defaults().pad(4f).margin(12f);
 
             TextButtonStyle style = Styles.flatBordert;
-            float margin = 12f;
 
             buttons.button("@mod.import", Icon.add, style, () -> {
                 BaseDialog dialog = new BaseDialog("@mod.import");
@@ -200,125 +221,162 @@ public class ModsDialog extends BaseDialog{
 
                 dialog.show();
 
-            }).margin(margin);
+            });
+
+            buttons.button("@mods.browser", Icon.menu, style, this::showModBrowser);
 
-            buttons.button("@mods.browser", Icon.menu, style, this::showModBrowser).margin(margin);
-        }).width(w);
+            buttons.row();
+
+            buttons.button("@mods.recommend", Icon.list, style, UIExt.modsRecommend::show).colspan(2);
+        }).width(modCardWidth);
 
         cont.row();
 
         if(!mods.list().isEmpty()){
-            boolean[] anyDisabled = {false};
-            Table[] pane = {null};
+            if(!mobile || Core.graphics.isPortrait()){
+                cont.table(search -> {
+                    search.image(Icon.zoom).padRight(8f);
+                    search.field("", text -> {
+                        modQuery = text;
+                        rebuildModPane();
+                    }).growX();
+                }).fillX().padBottom(4);
+            }
+
+            cont.row();
+            cont.pane(Styles.noBarPane, modPane).scrollX(false).update(s -> scroll = s.getScrollY()).get().setScrollYForce(scroll);
 
-            Cons<String> rebuild = query -> {
-                pane[0].clear();
+            modQuery = "";
+            rebuildModPane();
+        }else{
+            cont.table(Styles.black6, t -> t.add("@mods.none")).height(80f);
+        }
+
+        cont.row();
+    }
+
+    private void rebuildModPane(){
+        modPane.clearChildren();
+
+        addModGroup(modPane, "internal", internalMods);
+        addModGroup(modPane, "mod", otherMods);
+    }
+
+    private void addModGroup(Table table, String groupName, Seq<LoadedMod> mods){
+        table.table(Tex.whiteui, modGroup -> {
+            modGroup.add(Core.bundle.get("mods.group." + groupName) + "(" + mods.size + ")").color(Pal.accent).pad(4f).padLeft(12f).expandX().left();
+
+            modGroup.row();
+
+            modGroup.table(modCont -> {
                 boolean any = false;
-                for(LoadedMod item : mods.list()){
-                    if(Strings.matches(query, item.meta.displayName)){
-                        any = true;
-                        if(!item.enabled() && !anyDisabled[0] && mods.list().size > 0){
-                            anyDisabled[0] = true;
-                            pane[0].row();
-                            pane[0].image().growX().height(4f).pad(6f).color(Pal.gray).row();
-                        }
+                boolean anyDisabled = false;
 
-                        pane[0].button(t -> {
-                            t.top().left();
-                            t.margin(12f);
+                for(LoadedMod mod : mods){
+                    if(!Strings.matches(modQuery, mod.meta.displayName)){
+                        continue;
+                    }
 
-                            String stateDetails = getStateDetails(item);
-                            if(stateDetails != null){
-                                t.addListener(new Tooltip(f -> f.background(Styles.black8).margin(4f).add(stateDetails).growX().width(400f).wrap()));
-                            }
+                    any = true;
+                    if(!mod.enabled() && !anyDisabled && mods.any()){
+                        anyDisabled = true;
+                        modCont.row();
 
-                            t.defaults().left().top();
-                            t.table(title1 -> {
-                                title1.left();
-
-                                title1.add(new BorderImage(){{
-                                    if(item.iconTexture != null){
-                                        setDrawable(new TextureRegion(item.iconTexture));
-                                    }else{
-                                        setDrawable(Tex.nomap);
-                                    }
-                                    border(Pal.accent);
-                                }}).size(h - 8f).padTop(-8f).padLeft(-8f).padRight(8f);
-
-                                title1.table(text -> {
-                                    boolean hideDisabled = !item.isSupported() || item.hasUnmetDependencies() || item.hasContentErrors();
-                                    String shortDesc = item.meta.shortDescription();
-
-                                    text.add("[accent]" + Strings.stripColors(item.meta.displayName) + "\n" +
-                                        (shortDesc.length() > 0 ? "[lightgray]" + shortDesc + "\n" : "")
-                                        //so does anybody care about version?
-                                        //+ "[gray]v" + Strings.stripColors(trimText(item.meta.version)) + "\n"
-                                        + (item.enabled() || hideDisabled ? "" : Core.bundle.get("mod.disabled") + ""))
-                                    .wrap().top().width(300f).growX().left();
-
-                                    text.row();
-
-                                    String state = getStateText(item);
-                                    if(state != null){
-                                        text.labelWrap(state).growX().row();
-                                    }
-                                }).top().growX();
-
-                                title1.add().growX();
-                            }).growX().growY().left();
-
-                            t.table(right -> {
-                                right.right();
-                                right.button(item.enabled() ? Icon.downOpen : Icon.upOpen, Styles.clearNonei, () -> {
-                                    mods.setEnabled(item, !item.enabled());
-                                    setup();
-                                }).size(50f).disabled(!item.isSupported());
-
-                                right.button(item.hasSteamID() ? Icon.link : Icon.trash, Styles.clearNonei, () -> {
-                                    if(!item.hasSteamID()){
-                                        ui.showConfirm("@confirm", "@mod.remove.confirm", () -> {
-                                            mods.removeMod(item);
-                                            setup();
-                                        });
-                                    }else{
-                                        platform.viewListing(item);
-                                    }
-                                }).size(50f);
-
-                                if(steam && !item.hasSteamID()){
-                                    right.row();
-                                    right.button(Icon.export, Styles.clearNonei, () -> {
-                                        platform.publish(item);
-                                    }).size(50f);
-                                }
-                            }).growX().right().padRight(-8f).padTop(-8f);
-                        }, Styles.flatBordert, () -> showMod(item)).size(w, h).growX().pad(4f);
-                        pane[0].row();
+                        modCont.table(disableLine -> {
+                            disableLine.add("@mods.disabled").color(Color.red).pad(4f);
+                            disableLine.image().height(4f).pad(4f).color(Pal.darkestGray).growX();
+                        }).growX().pad(6f);
+
+                        modCont.row();
                     }
+
+                    addModCard(modCont, mod);
+
+                    Card.cardShadow(modCont);
+
+                    modCont.row();
                 }
 
                 if(!any){
-                    pane[0].add("@none.found").color(Color.lightGray).pad(4);
+                    modCont.add("@none.found").color(Color.lightGray).pad(4);
                 }
-            };
+            }).pad(8f).fillX();
+        }).color(Pal.gray).padTop(16f).growX();
 
-            if(!mobile || Core.graphics.isPortrait()){
-                cont.table(search -> {
-                    search.image(Icon.zoom).padRight(8f);
-                    search.field("", rebuild).growX();
-                }).fillX().padBottom(4);
+        table.row();
+    }
+
+    private void addModCard(Table table, LoadedMod mod){
+        table.button(t -> {
+            t.top().left();
+            t.margin(12f);
+
+            String stateDetails = getStateDetails(mod);
+            if(stateDetails != null){
+                t.addListener(new Tooltip(f -> f.background(Styles.black8).margin(4f).add(stateDetails).growX().width(400f).wrap()));
             }
 
-            cont.row();
-            cont.pane(table1 -> {
-                pane[0] = table1.margin(10f).top();
-                rebuild.get("");
-            }).scrollX(false).update(s -> scroll = s.getScrollY()).get().setScrollYForce(scroll);
-        }else{
-            cont.table(Styles.black6, t -> t.add("@mods.none")).height(80f);
-        }
+            t.defaults().left().top();
+            t.table(title1 -> {
+                title1.left();
 
-        cont.row();
+                title1.add(new BorderImage(){{
+                    if(mod.iconTexture != null){
+                        setDrawable(new TextureRegion(mod.iconTexture));
+                    }else{
+                        setDrawable(Tex.nomap);
+                    }
+                    border(Pal.accent);
+                }}).size(modCardHeight - 8f).padTop(-8f).padLeft(-8f).padRight(8f);
+
+                title1.table(text -> {
+                    boolean hideDisabled = !mod.isSupported() || mod.hasUnmetDependencies() || mod.hasContentErrors();
+                    String shortDesc = mod.meta.shortDescription();
+
+                    text.add("[accent]" + Strings.stripColors(mod.meta.displayName) + "\n" +
+                    (shortDesc.length() > 0 ? "[lightgray]" + shortDesc + "\n" : "")
+                    //so does anybody care about version?
+                    //+ "[gray]v" + Strings.stripColors(trimText(item.meta.version)) + "\n"
+                    + (mod.enabled() || hideDisabled ? "" : Core.bundle.get("mod.disabled") + ""))
+                    .wrap().top().width(300f).growX().left();
+
+                    text.row();
+
+                    String state = getStateText(mod);
+                    if(state != null){
+                        text.labelWrap(state).growX().row();
+                    }
+                }).top().growX();
+
+                title1.add().growX();
+            }).grow().left();
+
+            t.table(right -> {
+                right.right();
+                right.button(mod.enabled() ? Icon.downOpen : Icon.upOpen, Styles.clearNonei, () -> {
+                    mods.setEnabled(mod, !mod.enabled());
+                    setup();
+                }).size(50f).disabled(!mod.isSupported());
+
+                right.button(mod.hasSteamID() ? Icon.link : Icon.trash, Styles.clearNonei, () -> {
+                    if(!mod.hasSteamID()){
+                        ui.showConfirm("@confirm", "@mod.remove.confirm", () -> {
+                            mods.removeMod(mod);
+                            setup();
+                        });
+                    }else{
+                        platform.viewListing(mod);
+                    }
+                }).size(50f).disabled(mod.root.type() == FileType.internal);
+
+                if(steam && !mod.hasSteamID()){
+                    right.row();
+                    right.button(Icon.export, Styles.clearNonei, () -> {
+                        platform.publish(mod);
+                    }).size(50f);
+                }
+            }).growX().right().padRight(-8f).padTop(-8f);
+        }, Styles.flatBordert, () -> showMod(mod)).maxWidth(modCardWidth).height(modCardHeight).growX().pad(4f);
     }
 
     private @Nullable String getStateText(LoadedMod item){
diff --git a/core/src/mindustryX/features/UIExt.java b/core/src/mindustryX/features/UIExt.java
index b2576d865d48a096dea0ec18fb65e499caef8bea..8a7332b9e3e6c432aa415bd3d5e7402df18ac419 100644
--- a/core/src/mindustryX/features/UIExt.java
+++ b/core/src/mindustryX/features/UIExt.java
@@ -13,6 +13,7 @@ import static mindustry.content.UnitTypes.gamma;
 public class UIExt{
     public static AdvanceToolTable advanceToolTable;
     public static TeamSelectDialog teamSelect;
+    public static ModsRecommendDialog modsRecommend = new ModsRecommendDialog();
 
     public static void init(){
         teamSelect = new TeamSelectDialog();
diff --git a/core/src/mindustryX/features/ui/ModsRecommendDialog.java b/core/src/mindustryX/features/ui/ModsRecommendDialog.java
new file mode 100644
index 0000000000000000000000000000000000000000..add3a53cf92a66126cac448321913419b5b06a14
--- /dev/null
+++ b/core/src/mindustryX/features/ui/ModsRecommendDialog.java
@@ -0,0 +1,264 @@
+package mindustryX.features.ui;
+
+import arc.*;
+import arc.flabel.*;
+import arc.func.*;
+import arc.graphics.*;
+import arc.graphics.Texture.*;
+import arc.graphics.g2d.*;
+import arc.scene.*;
+import arc.scene.actions.*;
+import arc.scene.style.*;
+import arc.scene.ui.*;
+import arc.scene.ui.layout.*;
+import arc.struct.*;
+import arc.util.*;
+import mindustry.*;
+import mindustry.game.EventType.*;
+import mindustry.gen.*;
+import mindustry.graphics.*;
+import mindustry.io.*;
+import mindustry.mod.*;
+import mindustry.ui.*;
+import mindustry.ui.dialogs.*;
+
+import java.text.*;
+import java.util.*;
+
+/**
+ * @author minri2
+ * Create by 2024/4/12
+ */
+public class ModsRecommendDialog extends BaseDialog{
+    private static final TextureRegion defaultModIcon = ((TextureRegionDrawable)Tex.nomap).getRegion();
+    private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
+
+    public static Color
+    lightBlue = Color.valueOf("#a5dee5"),
+    pink = Color.valueOf("#ffcfdf");
+
+    private ObjectMap<String, TextureRegion> textureCache;
+    private RecommendMeta meta;
+    private boolean fetchModList;
+
+    public ModsRecommendDialog(){
+        super("");
+
+        setup();
+
+        shown(this::rebuild);
+        addCloseButton();
+
+        Events.run(Trigger.importMod, () -> Core.app.post(this::rebuild));
+    }
+
+    private void setup(){
+        titleTable.clearChildren();
+    }
+
+    private void rebuild(){
+        if(textureCache == null){
+            textureCache = Reflect.get(Vars.ui.mods, "textureCache");
+        }
+
+        if(meta == null){
+            String json = Core.files.internal("recommendMods.json").readString();
+
+            meta = JsonIO.json.fromJson(RecommendMeta.class, json);
+        }
+
+        if(!fetchModList){
+            setLoading(cont);
+
+            Reflect.invoke(Vars.ui.mods, "getModList", new Cons[]{listings -> {
+                Seq<ModListing> modListings = (Seq<ModListing>)listings;
+
+                // ???
+                if(modListings == null){
+                    setLoadFailed(cont);
+                    return;
+                }
+
+                for(RecommendModMeta modMeta : meta.modRecommend){
+                    modMeta.listing = modListings.find(modListing -> modMeta.repo.equals(modListing.repo));
+                }
+
+                fetchModList = true;
+                rebuildCont();
+            }}, Cons.class);
+
+            return;
+        }
+
+        rebuildCont();
+    }
+
+    private void rebuildCont(){
+        float width = Math.min(Core.graphics.getWidth() / Scl.scl(1.05f), 556f);
+
+        cont.top().clearChildren();
+        cont.defaults();
+
+        cont.add(new Card(Pal.lightishGray, Card.grayOuterDark, info -> {
+            info.top();
+            info.defaults().expandX().center();
+
+            info.add("@mods.recommend").pad(12f).row();
+            info.add(Core.bundle.format("mods.recommend.lastUpdated", meta.lastUpdated)).pad(6f).row();
+            info.add("@mods.recommend.info").pad(6f);
+
+            for(Element child : info.getChildren()){
+                if(child instanceof Label label){
+                    label.setColor(Pal.accent);
+                    label.setStyle(Styles.outlineLabel);
+                }
+            }
+        })).fillX();
+
+        cont.row();
+
+        cont.pane(Styles.noBarPane, t -> {
+            t.background(Tex.whiteui).setColor(Pal.lightishGray);
+
+            for(RecommendModMeta modMeta : meta.modRecommend){
+                if(modMeta.listing == null){
+                    Log.warn("Recommend Mod '@' not found in github.", modMeta.repo);
+                    continue;
+                }
+
+                t.table(Tex.whiteui, card -> {
+                    setupModCard(card, modMeta);
+                }).color(Pal.darkerGray).width(width).pad(12f).with(card -> {
+                    if(installed(modMeta)){
+                        card.addAction(Actions.color(Pal.accent, 1.5f));
+                    }
+                });
+
+                Card.cardShadow(t);
+
+                t.row();
+            }
+        }).scrollX(false);
+    }
+
+    private void setupModCard(Table table, RecommendModMeta modMeta){
+        table.defaults().growX();
+
+        ModListing modListing = modMeta.listing;
+
+        table.table(title -> {
+            title.add(new Card(Pal.gray, Card.grayOuterDark, info -> {
+                info.top();
+                info.defaults().padTop(2f).expandX().left();
+
+                addInfo(info, "name", modListing.name).color(Pal.accent).pad(8f);
+                addInfo(info, "author", modListing.author).color(pink).padTop(4f);
+                addInfo(info, "minGameVersion", modListing.minGameVersion).color(lightBlue);
+                addInfo(info, "lastUpdated", getLastUpdatedTime(modListing)).color(lightBlue);
+                addInfo(info, "stars", modListing.stars).color(lightBlue);
+
+                for(Element child : info.getChildren()){
+                    if(child instanceof Label label){
+                        label.setStyle(Styles.outlineLabel);
+                    }
+                }
+            })).pad(4f).padRight(12f).grow();
+
+            title.add(new BorderImage(){{
+                border(Pal.darkestGray);
+            }}).size(128f).pad(4f).with(image -> {
+                getModIcon(modMeta.repo, image::setDrawable);
+            });
+        });
+
+        table.row();
+
+        table.add(new Card(Pal.gray, Card.grayOuterDark, body -> {
+            body.add(modMeta.reason).pad(4f).grow().wrap();
+
+            body.addChild(new Table(buttons -> {
+                buttons.setFillParent(true);
+                buttons.right().bottom();
+                buttons.defaults().size(32f);
+
+                buttons.button(Icon.download, Styles.cleari, 24f, () -> {
+                    Vars.ui.mods.githubImportMod(modListing.repo, modListing.hasJava);
+                });
+            }));
+        })).minHeight(48f).pad(8f);
+    }
+
+    private Cell<?> addInfo(Table table, String bundle, Object value){
+        Cell<?> cell = table.add(Core.bundle.format("mods.recommend.mod." + bundle, value)).color(pink);
+
+        table.row();
+
+        return cell;
+    }
+
+    private boolean installed(RecommendModMeta modMeta){
+        return Vars.mods.list().find(mod -> modMeta.repo.equals(mod.getRepo())) != null;
+    }
+
+    private String getLastUpdatedTime(ModListing listing){
+        try{
+            Date date = dateFormat.parse(listing.lastUpdated);
+            return DateFormat.getInstance().format(date);
+        }catch(ParseException e){
+            return "Unknown";
+        }
+    }
+
+    private void getModIcon(String repo, Cons<TextureRegion> callback){
+        TextureRegion cache = textureCache.get(repo);
+
+        if(cache != null){
+            callback.get(cache);
+            return;
+        }
+
+        Http.get("https://raw.githubusercontent.com/Anuken/MindustryMods/master/icons/" + repo.replace("/", "_"), res -> {
+            Pixmap pix = new Pixmap(res.getResult());
+            Core.app.post(() -> {
+                try{
+                    Texture texture = new Texture(pix);
+                    texture.setFilter(TextureFilter.linear);
+                    TextureRegion region = new TextureRegion(texture);
+                    textureCache.put(repo, region);
+                    pix.dispose();
+
+                    callback.get(region);
+                }catch(Exception e){
+                    Log.err(e);
+
+                    textureCache.put(repo, defaultModIcon);
+                    callback.get(defaultModIcon);
+                }
+            });
+        }, err -> {
+            textureCache.put(repo, defaultModIcon);
+            callback.get(defaultModIcon);
+        });
+    }
+
+    private static void setLoading(Table table){
+        table.clearChildren();
+        table.add(new FLabel("@alphaLoading")).style(Styles.outlineLabel).expand().center();
+    }
+
+    private static void setLoadFailed(Table table){
+        table.clearChildren();
+        table.add(new FLabel("@alphaLoadFailed")).style(Styles.outlineLabel).expand().center();
+    }
+
+    private static class RecommendMeta{
+        public String lastUpdated;
+        public Seq<RecommendModMeta> modRecommend;
+    }
+
+    private static class RecommendModMeta{
+        public String repo;
+        public String reason;
+        public ModListing listing;
+    }
+}

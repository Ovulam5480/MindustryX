From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Sun, 28 Jan 2024 17:39:57 +0800
Subject: [PATCH] =?UTF-8?q?FC:=20Loader=20Mod=E5=AE=9E=E7=8E=B0?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

添加`icon.png`
way-zer <himc.wicp@gmail.com> on 2024/6/9

更好的Desktop适配
way-zer <himc.wicp@gmail.com> on 2024/8/3
---
 .../src/mindustryX/loader/AndroidImpl.java    | 273 ++++++++++++++
 core/src/mindustryX/loader/DesktopImpl.java   | 136 +++++++
 .../src/mindustryX/loader/LoaderPlatform.java |  46 +++
 core/src/mindustryX/loader/Main.java          | 116 ++++++
 .../src/arc/backend/sdl/SdlApplication.java   | 355 ++++++++++++++++++
 5 files changed, 926 insertions(+)
 create mode 100644 android/src/mindustryX/loader/AndroidImpl.java
 create mode 100644 core/src/mindustryX/loader/DesktopImpl.java
 create mode 100644 core/src/mindustryX/loader/LoaderPlatform.java
 create mode 100644 core/src/mindustryX/loader/Main.java
 create mode 100644 desktop/src/arc/backend/sdl/SdlApplication.java

diff --git a/android/src/mindustryX/loader/AndroidImpl.java b/android/src/mindustryX/loader/AndroidImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..b940ea6d550cc1d7e47c3c82573d8945bfc24836
--- /dev/null
+++ b/android/src/mindustryX/loader/AndroidImpl.java
@@ -0,0 +1,273 @@
+package mindustryX.loader;
+
+import android.app.*;
+import android.content.pm.*;
+import android.os.*;
+import android.view.*;
+import arc.*;
+import arc.Files.*;
+import arc.backend.android.*;
+import arc.files.*;
+import arc.func.*;
+import arc.util.*;
+import dalvik.system.*;
+import mindustry.*;
+import mindustry.android.*;
+
+import java.io.*;
+import java.lang.reflect.Proxy;
+import java.lang.reflect.*;
+import java.net.*;
+import java.util.*;
+
+public class AndroidImpl implements LoaderPlatform{
+    private AndroidLauncher app = (AndroidLauncher)Core.app;
+
+    private Object[] getDexElements(ClassLoader classLoader){
+        Object pathList = Reflect.get(BaseDexClassLoader.class, classLoader, "pathList");
+        return Reflect.get(pathList, "dexElements");
+    }
+
+    private File findFirstJar(){
+        return Reflect.get(getDexElements(Main.class.getClassLoader())[0], "path");
+    }
+
+    @Override
+    public void withSafeClassloader(String method){
+        try{
+            ClassLoader classLoader = new DexClassLoader(findFirstJar().getPath(), app.getFilesDir().getPath(), null, Core.class.getClassLoader());
+            Reflect.invoke(classLoader.loadClass(Main.class.getName()), method);
+        }catch(Exception e){
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public ClassLoader createClassloader(){
+        ClassLoader parent = Core.class.getClassLoader();
+        File apk = Reflect.get(getDexElements(parent)[0], "path");
+//        List<File> nativeLibrary = Reflect.get(parentPathList, "nativeLibraryDirectories");
+        assert parent != null;
+        ClassLoader classLoader = new DexClassLoader(findFirstJar().getPath() + File.pathSeparator + apk.getPath(), app.getFilesDir().getPath(), null, parent){
+            @Override
+            protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException{
+                if(!overwrite(name))
+                    return super.loadClass(name, resolve);
+                //check for loaded state
+                Class<?> loadedClass = findLoadedClass(name);
+                if(loadedClass == null){
+                    try{
+                        //try to load own class first
+                        loadedClass = findClass(name);
+                    }catch(ClassNotFoundException e){
+                        //use parent if not found
+                        return parent.loadClass(name);
+                    }
+                }
+
+                return loadedClass;
+            }
+
+            private Boolean overwrite(String name){
+//                if(name.contains("ExternalSynthetic")) return false;
+                if(name.startsWith("arc.func")) return false;
+                return name.startsWith("mindustry") || name.startsWith("arc.") || name.startsWith("rhino.");
+            }
+
+            @Override
+            public String findLibrary(String name){
+                //TODO Soloud的native会查找class，而且不支持classloader。
+                String file = super.findLibrary(name);
+                //Android的jni方法不能跨classloader，且同一个so库加载多次
+                if(file != null){
+                    Fi newFile = new Fi(app.getFilesDir()).child(name + ".so");
+                    new Fi(file).copyTo(newFile);
+                    file = newFile.path();
+                }
+                return file;
+            }
+
+            @Override
+            public URL getResource(String name){
+                if(name.equals("MindustryX.hjson"))
+                    return findResource("mod.hjson");
+                if(name.equals("mod.hjson") || name.equals("icon.png")) return null;
+                //self first
+                URL url = findResource(name);
+                if(url == null)
+                    url = parent.getResource(name);
+                return url;
+            }
+
+            @Override
+            public Enumeration<URL> getResources(String name) throws IOException{
+                return new CompoundURLEnumeration(
+                //self first
+                findResources(name), parent.getResources(name)
+                );
+            }
+        };
+        Object pathList = Reflect.get(BaseDexClassLoader.class, classLoader, "pathList");
+        Object parentPathList = Reflect.get(BaseDexClassLoader.class, parent, "pathList");
+        Reflect.set(pathList, "nativeLibraryDirectories", Reflect.get(parentPathList, "nativeLibraryDirectories"));
+        Reflect.set(pathList, "nativeLibraryPathElements", Reflect.get(parentPathList, "nativeLibraryPathElements"));
+        return classLoader;
+    }
+
+    private static Object[] makeDexElements(Object dexPathList, ArrayList<File> files, File optimizedDirectory){
+        if(Build.VERSION.SDK_INT >= 23){
+            ArrayList<IOException> suppressedExceptions = new ArrayList<>();
+            return Reflect.invoke(dexPathList.getClass(), "makePathElements", new Object[]{files, optimizedDirectory, suppressedExceptions}, List.class, File.class, List.class);
+        }else{
+            return Reflect.invoke(dexPathList.getClass(), "makeDexElements", new Object[]{files, optimizedDirectory}, ArrayList.class, File.class);
+        }
+    }
+
+    @Override
+    public void launch(ClassLoader loader) throws Exception{
+
+        Class<?> cls = loader.loadClass(AndroidImpl.class.getName());
+        app.handler.post(() -> {
+            ((AndroidInput)Core.input).onPause();
+//            Reflect.invoke(Core.graphics, "pause");
+            Core.graphics.dispose();
+            Core.audio.dispose();
+            app.setContentView(Reflect.invoke(cls, "bootStrapAsView",
+            new Object[]{app, app.getListeners().get(0)}, Activity.class, Object.class));
+        });
+    }
+
+    public static View bootStrapAsView(Activity activity, Object platform){
+        AndroidApplication newApp = new AndroidLauncher();
+        copyFields(activity, newApp);
+        AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
+        config.useImmersiveMode = true;
+        config.hideStatusBar = true;
+        View view = newApp.initializeForView(new ClientLauncher(){
+
+            @Override
+            public void hide(){
+                activity.moveTaskToBack(true);
+            }
+
+            @Override
+            public rhino.Context getScriptContext(){
+                return AndroidRhinoContext.enter(activity.getCacheDir());
+            }
+
+            @Override
+            public void shareFile(Fi file){
+            }
+
+            @Override
+            public ClassLoader loadJar(Fi jar, ClassLoader parent) throws Exception{
+                return new DexClassLoader(jar.file().getPath(), activity.getFilesDir().getPath(), null, parent){
+                    @Override
+                    protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException{
+                        //check for loaded state
+                        Class<?> loadedClass = findLoadedClass(name);
+                        if(loadedClass == null){
+                            try{
+                                //try to load own class first
+                                loadedClass = findClass(name);
+                            }catch(ClassNotFoundException | NoClassDefFoundError e){
+                                //use parent if not found
+                                return parent.loadClass(name);
+                            }
+                        }
+
+                        if(resolve){
+                            resolveClass(loadedClass);
+                        }
+                        return loadedClass;
+                    }
+                };
+            }
+
+            @Override
+            public void showFileChooser(boolean open, String title, String extension, Cons<Fi> cons){
+                showFileChooser(open, title, cons, extension);
+            }
+
+            @Override
+            public void showMultiFileChooser(Cons<Fi> cons, String... extensions){
+                showFileChooser(true, "@open", cons, extensions);
+            }
+
+            void showFileChooser(boolean open, String title, Cons<Fi> cons, String... extensions){
+                Cons<Object> consProxy = (fi) -> {
+                    Class<?> cls = fi.getClass();
+                    if(cls.isAnonymousClass()){
+                        cons.get(new Fi((File)Reflect.get(fi, "file")){
+                            @Override
+                            public InputStream read(){
+                                return Reflect.invoke(fi, "read");
+                            }
+
+                            @Override
+                            public OutputStream write(boolean append){
+                                return Reflect.invoke(fi, "write", new Object[]{append}, boolean.class);
+                            }
+                        });
+                    }else if(cls.getSimpleName().equals("Fi")){
+                        cons.get(new Fi((File)Reflect.get(fi, "file")));
+                    }else{
+                        Vars.ui.showErrorMessage("Not Implement showFileChooser");
+                    }
+                };
+                try{
+                    Method m = platform.getClass().getDeclaredMethod("showFileChooser", boolean.class, String.class, Cons.class, String[].class);
+                    m.setAccessible(true);
+                    m.invoke(platform, open, title, consProxy, extensions);
+                }catch(Exception e){
+                    Log.err(e);
+                }
+            }
+
+            @Override
+            public void beginForceLandscape(){
+                activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
+            }
+
+            @Override
+            public void endForceLandscape(){
+                activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_USER);
+            }
+        }, config);
+        ClassLoader loader = Main.class.getClassLoader();
+        assert loader != null;
+        Files origin = Core.files;
+        Core.files = (Files)Proxy.newProxyInstance(Main.class.getClassLoader(), new Class[]{Files.class}, (proxy, method, args) -> {
+            if(method.getName().equals("internal") || (method.getName().equals("get") && args[1] == FileType.internal)){
+                String path = (String)args[0];
+                if(loader.getResource(path) != null){
+                    return origin.classpath(path);
+                }
+            }
+            return method.invoke(origin, args);
+        });
+        try{
+            //new external folder
+            Fi data = Core.files.absolute(newApp.getExternalFilesDir(null).getAbsolutePath());
+            Core.settings.setDataDirectory(data);
+        }catch(Exception e){
+            //print log but don't crash
+            Log.err(e);
+        }
+        return view;
+    }
+
+    private static void copyFields(Object a, Object b){
+        Class<?> ca = a.getClass(), cb = b.getClass();
+        while(ca != Object.class){
+            if(ca == cb){
+                for(Field f : ca.getDeclaredFields()){
+                    f.setAccessible(true);
+                    Reflect.set(b, f, Reflect.get(a, f));
+                }
+            }
+            ca = ca.getSuperclass();
+            cb = cb.getSuperclass();
+        }
+    }
+}
diff --git a/core/src/mindustryX/loader/DesktopImpl.java b/core/src/mindustryX/loader/DesktopImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..436debef14096ac48c4532f472d3c057365da296
--- /dev/null
+++ b/core/src/mindustryX/loader/DesktopImpl.java
@@ -0,0 +1,136 @@
+package mindustryX.loader;
+
+import arc.*;
+import arc.struct.*;
+import arc.util.*;
+import arc.util.io.*;
+import mindustry.game.*;
+
+import java.io.*;
+import java.net.*;
+import java.util.*;
+
+public class DesktopImpl implements LoaderPlatform{
+    @Override
+    public void withSafeClassloader(String method){
+        URL file = ((URLClassLoader)Main.class.getClassLoader()).getURLs()[0];
+        ClassLoader parent = Core.class.getClassLoader();
+        try(var classLoader = new URLClassLoader(new URL[]{file}, parent)){
+            Reflect.invoke(classLoader.loadClass(Main.class.getName()), method);
+        }catch(Exception e){
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public void beforeLaunch(){
+        //fix steam
+        //noinspection unchecked
+        Seq<?> listeners = ((ObjectMap<Object, Seq<?>>)Reflect.get(Events.class, "events")).get(EventType.DisposeEvent.class);
+        if(listeners != null) listeners.clear();
+
+        for(ApplicationListener l : Core.app.getListeners()){
+            l.pause();
+            try{
+                l.dispose();
+            }catch(Throwable e){
+                Log.err("Cleanup", e);
+            }
+        }
+        Core.app.dispose();
+//        try{
+//            Class<?> sdl = Class.forName("arc.backend.sdl.jni.SDL");
+//            Reflect.invoke(sdl, "SDL_DestroyWindow", new Object[]{Reflect.get(Core.app, "window")}, long.class);
+////            Reflect.invoke(sdl, "SDL_Quit");
+//        }catch(Throwable e){
+//            throw new RuntimeException(e);
+//        }
+
+        System.setProperty("MDTX-SDL-width", "" + Core.graphics.getWidth());
+        System.setProperty("MDTX-SDL-height", "" + Core.graphics.getHeight());
+        System.setProperty("MDTX-SDL-window", Reflect.get(Core.app, "window").toString());
+        System.setProperty("MDTX-SDL-context", Reflect.get(Core.app, "context").toString());
+    }
+
+    @Override
+    public ClassLoader createClassloader(){
+        URL file = ((URLClassLoader)Main.class.getClassLoader()).getURLs()[0];
+        ClassLoader parent = Core.class.getClassLoader();
+        return new URLClassLoader(new URL[]{file}, parent){
+            @Override
+            protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException{
+                synchronized(getClassLoadingLock(name)){
+                    //check for loaded state
+                    Class<?> loadedClass = findLoadedClass(name);
+                    if(loadedClass == null){
+                        try{
+                            //try to load own class first
+                            loadedClass = findClass(name);
+                        }catch(ClassNotFoundException e){
+                            //use parent if not found
+                            return parent.loadClass(name);
+                        }
+                    }
+
+                    if(resolve){
+                        resolveClass(loadedClass);
+                    }
+                    return loadedClass;
+                }
+            }
+
+            @Override
+            protected Class<?> findClass(String name) throws ClassNotFoundException{
+                try{
+                    return super.findClass(name);
+                }catch(ClassNotFoundException e){
+                    if(overwrite(name)){
+                        InputStream res = parent.getResourceAsStream(name.replace('.', '/').concat(".class"));
+                        if(res != null){
+                            try{
+                                byte[] bs = Streams.copyBytes(res);
+                                return defineClass(name, bs, 0, bs.length);
+                            }catch(IOException | ClassFormatError e2){
+                                e.addSuppressed(e2);
+                            }finally{
+                                Streams.close(res);
+                            }
+                        }
+                    }
+                    throw e;
+                }
+            }
+
+            private Boolean overwrite(String name){
+                if(name.startsWith("arc.backend.sdl.jni")) return false;
+                return name.startsWith("mindustry") || name.startsWith("arc");
+            }
+
+            @Override
+            public URL getResource(String name){
+                if(name.equals("MindustryX.hjson"))
+                    return findResource("mod.hjson");
+                if(name.equals("mod.hjson") || name.equals("icon.png")) return null;
+                //self first
+                URL url = findResource(name);
+                if(url == null)
+                    url = parent.getResource(name);
+                return url;
+            }
+
+            @Override
+            public Enumeration<URL> getResources(String name) throws IOException{
+                return new CompoundURLEnumeration(
+                //self first
+                findResources(name), parent.getResources(name)
+                );
+            }
+        };
+    }
+
+    @Override
+    public void launch(ClassLoader loader) throws Exception{
+        Reflect.invoke(loader.loadClass("mindustry.desktop.DesktopLauncher"), "main", new Object[]{new String[]{}}, String[].class);
+        System.exit(0);
+    }
+}
diff --git a/core/src/mindustryX/loader/LoaderPlatform.java b/core/src/mindustryX/loader/LoaderPlatform.java
new file mode 100644
index 0000000000000000000000000000000000000000..ae7a1740e384f49f7b85c84d4268c68f51b63840
--- /dev/null
+++ b/core/src/mindustryX/loader/LoaderPlatform.java
@@ -0,0 +1,46 @@
+package mindustryX.loader;
+
+import java.net.*;
+import java.util.*;
+
+interface LoaderPlatform{
+    void withSafeClassloader(String method);
+
+    ClassLoader createClassloader();
+
+    default void beforeLaunch(){
+    }
+
+    void launch(ClassLoader loader) throws Exception;
+
+    final class CompoundURLEnumeration implements Enumeration<URL>{
+        private final Enumeration<URL>[] enums;
+        private int index;
+
+        @SafeVarargs
+        public CompoundURLEnumeration(Enumeration<URL>... enums){
+            this.enums = enums;
+        }
+
+        private boolean next(){
+            while(index < enums.length){
+                if(enums[index] != null && enums[index].hasMoreElements()){
+                    return true;
+                }
+                index++;
+            }
+            return false;
+        }
+
+        public boolean hasMoreElements(){
+            return next();
+        }
+
+        public URL nextElement(){
+            if(!next()){
+                throw new NoSuchElementException();
+            }
+            return enums[index].nextElement();
+        }
+    }
+}
diff --git a/core/src/mindustryX/loader/Main.java b/core/src/mindustryX/loader/Main.java
new file mode 100644
index 0000000000000000000000000000000000000000..ffe311d2a8e095c1e3262cdd2ede50ff42235c61
--- /dev/null
+++ b/core/src/mindustryX/loader/Main.java
@@ -0,0 +1,116 @@
+package mindustryX.loader;
+
+import arc.*;
+import arc.struct.*;
+import arc.struct.ObjectMap.*;
+import arc.util.*;
+import arc.util.Log.*;
+import mindustry.*;
+import mindustry.core.*;
+import mindustry.game.EventType.*;
+import mindustry.mod.*;
+import mindustry.mod.Mods.*;
+
+import java.util.*;
+
+/** @author WayZer */
+@SuppressWarnings("unused")
+public class Main extends Mod{
+    static LoaderPlatform getLoaderPlatform(){
+        try{
+            if(Core.app.isDesktop()){
+                return new DesktopImpl();
+            }else if(Core.app.isAndroid()){
+                return (LoaderPlatform)Class.forName("mindustryX.loader.AndroidImpl").getConstructor().newInstance();
+            }
+        }catch(Exception e){
+            Log.err(e);
+        }
+        return null;
+    }
+
+    public Main(){
+        //When import mod, the constructor will be invoked.
+        if(System.getProperty("MDTX-loaded") == null){
+            System.setProperty("MDTX-loaded", "true");
+            LoaderPlatform impl = getLoaderPlatform();
+            if(impl == null){
+                loadError("Not support platform, skip.");
+                return;
+            }
+            impl.withSafeClassloader("preload");
+        }else{
+            Log.infoTag("MindustryX", "Already inside MindustryX.");
+        }
+    }
+
+    private static LoaderPlatform impl;
+
+    private static void loadError(String msg){
+        Log.errTag("MindustryX", msg);
+        Events.on(ClientLoadEvent.class, (e) -> Vars.ui.showErrorMessage("Exception when load MindustryX:\n" + msg));
+    }
+
+    @SuppressWarnings("unused")//invoke in safe classloader
+    static void preload(){
+        if(Vars.clientLoaded) return;
+        impl = getLoaderPlatform();
+        if(!checkVersion()) return;
+        Core.app.post(Main::load);
+        try{
+            Thread.sleep(9999999999999999L);
+        }catch(InterruptedException e){
+            throw new RuntimeException(e);
+        }
+    }
+
+    private static boolean checkVersion(){
+        if(!Version.type.equals("official") || !Version.combined().startsWith(Version.modifier)){
+            loadError("Not official version, skip: get " + Version.combined());
+            return false;
+        }
+
+        try{
+            loadError("Detected ARC client, skip: " + Reflect.get(Version.class, "arcBuild"));
+            return false;
+        }catch(Exception e){/*ignore*/}
+
+        try{
+            loadError("Detected FOO client, skip: " + Reflect.get(Version.class, "clientVersion"));
+            return false;
+        }catch(Exception e){/*ignore*/}
+
+        ModMeta meta = null;
+        @SuppressWarnings("unchecked")
+        var metas = ((ObjectMap<Class<?>, ModMeta>)Reflect.get(Vars.mods, "metas"));
+        for(Entry<Class<?>, ModMeta> entry : metas.entries()){
+            if(entry.key.getName().equals(Main.class.getName())){//the class is not the same one.
+                meta = entry.value;
+                break;
+            }
+        }
+        Objects.requireNonNull(meta, "Can't get mod meta");
+        String version = meta.minGameVersion;
+        if(!Version.buildString().equals(version)){
+            loadError("Version not match, skip. (expect " + version + ", get " + Version.buildString() + ")");
+            return false;
+        }
+        return true;
+    }
+
+    static void load(){
+        ClassLoader classLoader = impl.createClassloader();
+        impl.beforeLaunch();
+        Vars.finishLaunch();//mark a successful launch
+        Log.info("=========== Start mindustryX client ===============");
+        Log.logger = new NoopLogHandler();
+        try{
+            Thread.currentThread().setContextClassLoader(classLoader);
+            impl.launch(classLoader);
+            Thread.currentThread().interrupt();
+        }catch(Exception e){
+            e.printStackTrace(System.err);
+            Vars.launchIDFile.writeString(e.toString());//mark failed
+        }
+    }
+}
diff --git a/desktop/src/arc/backend/sdl/SdlApplication.java b/desktop/src/arc/backend/sdl/SdlApplication.java
new file mode 100644
index 0000000000000000000000000000000000000000..bb63fa602677dfaa7b838e43d5c7f183968fab22
--- /dev/null
+++ b/desktop/src/arc/backend/sdl/SdlApplication.java
@@ -0,0 +1,355 @@
+package arc.backend.sdl;
+
+import arc.*;
+import arc.audio.*;
+import arc.files.*;
+import arc.func.*;
+import arc.graphics.*;
+import arc.math.geom.*;
+import arc.scene.ui.*;
+import arc.struct.*;
+import arc.util.TaskQueue;
+import arc.util.*;
+import mindustryX.*;
+
+import java.io.*;
+import java.net.*;
+import java.util.*;
+
+import static arc.backend.sdl.jni.SDL.*;
+
+public class SdlApplication implements Application{
+    private final Seq<ApplicationListener> listeners = new Seq<>();
+    private final TaskQueue runnables = new TaskQueue();
+    private final int[] inputs = new int[64];
+
+    final SdlGraphics graphics;
+    final SdlInput input;
+    final SdlConfig config;
+
+    boolean running = true;
+    long window, context;
+
+    public SdlApplication(ApplicationListener listener, SdlConfig config){
+        this.config = config;
+        this.listeners.add(listener);
+
+        init();
+
+        Core.app = this;
+        Core.files = new SdlFiles();
+        Core.graphics = this.graphics = new SdlGraphics(this);
+        Core.input = this.input = new SdlInput();
+        Core.settings = new Settings();
+        Core.audio = new Audio(!config.disableAudio);
+
+        initIcon();
+
+        graphics.updateSize(config.width, config.height);
+
+        //can't be bothered to recompile arc for mac
+        if(!OS.isMac){
+            addTextInputListener();
+        }
+
+        try{
+            loop();
+            listen(ApplicationListener::exit);
+        }finally{
+            try{
+                cleanup();
+            }catch(Throwable error){
+                error.printStackTrace();
+            }
+        }
+    }
+
+    /** Used for Scene text fields. */
+    private void addTextInputListener(){
+        addListener(new ApplicationListener(){
+            TextField lastFocus;
+
+            @Override
+            public void update(){
+                if(Core.scene != null && Core.scene.getKeyboardFocus() instanceof TextField){
+                    TextField next = (TextField)Core.scene.getKeyboardFocus();
+                    if(lastFocus == null){
+                        SDL_StartTextInput();
+                    }
+                    lastFocus = next;
+                }else if(lastFocus != null){
+                    SDL_StopTextInput();
+                    lastFocus = null;
+                }
+
+                if(lastFocus != null){
+                    Vec2 pos = lastFocus.localToStageCoordinates(Tmp.v1.setZero());
+                    SDL_SetTextInputRect((int)pos.x, Core.graphics.getHeight() - 1 - (int)(pos.y + lastFocus.getHeight()), (int)lastFocus.getWidth(), (int)lastFocus.getHeight());
+                }
+            }
+        });
+    }
+
+    private void initIcon(){
+        if(config.windowIconPaths != null && config.windowIconPaths.length > 0){
+            String path = config.windowIconPaths[0];
+            try{
+                Pixmap p = new Pixmap(Core.files.get(path, config.windowIconFileType));
+                long surface = SDL_CreateRGBSurfaceFrom(p.pixels, p.width, p.height);
+                SDL_SetWindowIcon(window, surface);
+                SDL_FreeSurface(surface);
+                p.dispose();
+            }catch(Exception e){
+                e.printStackTrace();
+            }
+        }
+    }
+
+    private void init(){
+        ArcNativesLoader.load();
+
+        if(OS.isMac) restartMac();
+
+        if(VarsX.isLoader){
+            Log.info("[Core] Initialize reusing window and context.");
+            window = Long.parseLong(System.getProperty("MDTX-SDL-window"));
+            context = Long.parseLong(System.getProperty("MDTX-SDL-context"));
+
+            config.width = Integer.parseInt(System.getProperty("MDTX-SDL-width"));
+            config.height = Integer.parseInt(System.getProperty("MDTX-SDL-height"));
+
+            int[] ver = new int[3];
+            SDL_GetVersion(ver);
+            Log.info("[Core] Initialized SDL v@.@.@", ver[0], ver[1], ver[2]);
+            return;
+        }
+
+        check(() -> SDL_Init(SDL_INIT_VIDEO | SDL_INIT_EVENTS));
+
+        //show native IME candidate UI
+        SDL_SetHint("SDL_IME_SHOW_UI", "1");
+        SDL_SetHint("SDL_WINDOWS_DPI_SCALING", "1");
+
+        //set up openGL 2.0 profile
+        check(() -> SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, config.gl30 ? config.gl30Major : 2));
+        check(() -> SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, config.gl30 ? config.gl30Minor : 0));
+
+//        if(config.gl30 && (OS.isMac || config.coreProfile)){
+//            check(() -> SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE));
+//        }
+
+        check(() -> SDL_GL_SetAttribute(SDL_GL_RED_SIZE, config.r));
+        check(() -> SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, config.g));
+        check(() -> SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, config.b));
+        check(() -> SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, config.depth));
+        check(() -> SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE, config.stencil));
+        check(() -> SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1));
+
+        //this doesn't seem to do anything, but at least I tried
+        if(config.samples > 0){
+            check(() -> SDL_GL_SetAttribute(SDL_GL_MULTISAMPLEBUFFERS, 1));
+            check(() -> SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES, config.samples));
+        }
+
+        int flags = SDL_WINDOW_OPENGL;
+        if(config.initialVisible) flags |= SDL_WINDOW_SHOWN;
+        if(!config.decorated) flags |= SDL_WINDOW_BORDERLESS;
+        if(config.resizable) flags |= SDL_WINDOW_RESIZABLE;
+        if(config.maximized) flags |= SDL_WINDOW_MAXIMIZED;
+        if(config.fullscreen) flags |= SDL_WINDOW_FULLSCREEN;
+
+        window = SDL_CreateWindow(config.title, config.width, config.height, flags);
+        if(window == 0) throw new SdlError();
+
+        context = SDL_GL_CreateContext(window);
+        if(context == 0) throw new SdlError();
+
+        if(config.vSyncEnabled){
+            SDL_GL_SetSwapInterval(1);
+        }
+
+        int[] ver = new int[3];
+        SDL_GetVersion(ver);
+        Log.info("[Core] Initialized SDL v@.@.@", ver[0], ver[1], ver[2]);
+    }
+
+    private void loop(){
+
+        listen(ApplicationListener::init);
+
+        while(running){
+            while(SDL_PollEvent(inputs)){
+                if(inputs[0] == SDL_EVENT_QUIT){
+                    running = false;
+                }else if(inputs[0] == SDL_EVENT_WINDOW){
+                    int type = inputs[1];
+                    if(type == SDL_WINDOWEVENT_SIZE_CHANGED){
+                        graphics.updateSize(inputs[2], inputs[3]);
+                        listen(l -> l.resize(inputs[2], inputs[3]));
+                    }else if(type == SDL_WINDOWEVENT_FOCUS_GAINED){
+                        listen(ApplicationListener::resume);
+                    }else if(type == SDL_WINDOWEVENT_FOCUS_LOST){
+                        listen(ApplicationListener::pause);
+                    }
+                }else if(inputs[0] == SDL_EVENT_MOUSE_MOTION ||
+                inputs[0] == SDL_EVENT_MOUSE_BUTTON ||
+                inputs[0] == SDL_EVENT_MOUSE_WHEEL ||
+                inputs[0] == SDL_EVENT_KEYBOARD ||
+                inputs[0] == SDL_EVENT_TEXT_INPUT ||
+                inputs[0] == SDL_EVENT_TEXT_EDIT){
+                    input.handleInput(inputs);
+                }
+            }
+
+            graphics.update();
+            input.update();
+            defaultUpdate();
+
+            listen(ApplicationListener::update);
+
+            runnables.run();
+
+            SDL_GL_SwapWindow(window);
+            input.postUpdate();
+        }
+    }
+
+    private void listen(Cons<ApplicationListener> cons){
+        synchronized(listeners){
+            for(ApplicationListener l : listeners){
+                cons.get(l);
+            }
+        }
+    }
+
+    private void cleanup(){
+        listen(l -> {
+            l.pause();
+            try{
+                l.dispose();
+            }catch(Throwable t){
+                t.printStackTrace();
+            }
+        });
+        dispose();
+
+        SDL_DestroyWindow(window);
+        SDL_Quit();
+    }
+
+    private void check(Intp run){
+        if(run.get() != 0){
+            throw new SdlError();
+        }
+    }
+
+    public long getWindow(){
+        return window;
+    }
+
+    @Override
+    public boolean openFolder(String file){
+        Threads.daemon(() -> {
+            if(OS.isWindows){
+                OS.execSafe("explorer.exe /select," + file.replace("/", "\\"));
+            }else if(OS.isLinux){
+                OS.execSafe("xdg-open", file);
+            }else if(OS.isMac){
+                OS.execSafe("open", file);
+            }
+        });
+        return true;
+    }
+
+    @Override
+    public boolean openURI(String url){
+
+        //make sure it's a valid URI
+        try{
+            URI.create(url);
+        }catch(Exception wrong){
+            return false;
+        }
+
+        Threads.daemon(() -> {
+            if(OS.isMac){
+                OS.execSafe("open", url);
+            }else if(OS.isLinux){
+                OS.execSafe("xdg-open", url);
+            }else if(OS.isWindows){
+                OS.execSafe("rundll32", "url.dll,FileProtocolHandler", url);
+            }
+        });
+        return true;
+    }
+
+    @Override
+    public Seq<ApplicationListener> getListeners(){
+        return listeners;
+    }
+
+    @Override
+    public ApplicationType getType(){
+        return ApplicationType.desktop;
+    }
+
+    @Override
+    public String getClipboardText(){
+        return SDL_GetClipboardText();
+    }
+
+    @Override
+    public void setClipboardText(String text){
+        SDL_SetClipboardText(text);
+    }
+
+    @Override
+    public void post(Runnable runnable){
+        runnables.post(runnable);
+    }
+
+    @Override
+    public void exit(){
+        running = false;
+    }
+
+    public static class SdlError extends RuntimeException{
+        public SdlError(){
+            super(SDL_GetError());
+        }
+    }
+
+    /** MacOS doesn't work when -XstartOnFirstThread is not passed, this will restart the program with that argument if it isn't already present. */
+    @SuppressWarnings("unchecked")
+    private void restartMac(){
+        try{
+            Class<?> mgmt = Class.forName("java.lang.management.ManagementFactory");
+            Class<?> beanClass = Class.forName("java.lang.management.RuntimeMXBean");
+            Object bean = Reflect.invoke(mgmt, "getRuntimeMXBean");
+            String id = ((String)beanClass.getMethod("getName").invoke(bean)).split("@")[0];
+
+            if(!OS.hasEnv("JAVA_STARTED_ON_FIRST_THREAD_" + id) || OS.env("JAVA_STARTED_ON_FIRST_THREAD_" + id).equals("0")){ //check if equal to 0 just in case
+                Log.warn("Applying -XstartOnFirstThread for macOS support.");
+                String javaPath = //attempt to locate java
+                new Fi(OS.prop("java.home")).child("bin/java").exists() ? new Fi(OS.prop("java.home")).child("bin/java").absolutePath() :
+                Core.files.local("jre/bin/java").exists() ? Core.files.local("jre/bin/java").absolutePath() :
+                "java";
+                try{
+                    Fi jar = Fi.get(SdlApplication.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath());
+                    Seq<String> launchOptions = Seq.with(javaPath);
+                    launchOptions.addAll((List<String>)beanClass.getMethod("getInputArguments").invoke(bean));
+                    launchOptions.addAll(System.getProperties().entrySet().stream().map(it -> "-D" + it).toArray(String[]::new));
+                    launchOptions.addAll("-XstartOnFirstThread", "-jar", jar.absolutePath(), "-firstThread");
+
+                    Process proc = new ProcessBuilder(launchOptions.toArray(String.class)).inheritIO().start();
+                    System.exit(proc.waitFor());
+                }catch(IOException | URISyntaxException e){ //some part of this failed, likely failed to find java
+                    Log.err(e);
+                    Log.err("Failed to apply the -XstartOnFirstThread argument, it is required in order to work on mac.");
+                }catch(InterruptedException ignored){
+                }
+            }
+        }catch(Exception ignored){
+        } //likely using bundled java, do nothing as the arg is already added
+    }
+}

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Sat, 20 Apr 2024 20:56:38 +0800
Subject: [PATCH] API&C: DebugUtil
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

更多统计信息
way-zer <himc.wicp@gmail.com> on 2024/7/21
---
 core/src/arc/graphics/g2d/MySpriteBatch.java  | 26 +++++++++++++++++++
 core/src/mindustry/ClientLauncher.java        |  2 +-
 core/src/mindustry/core/Logic.java            |  3 +++
 .../mindustry/ui/fragments/HudFragment.java   |  7 +++++
 core/src/mindustryX/Hooks.java                |  1 +
 core/src/mindustryX/features/DebugUtil.java   | 21 +++++++++++++++
 6 files changed, 59 insertions(+), 1 deletion(-)
 create mode 100644 core/src/arc/graphics/g2d/MySpriteBatch.java
 create mode 100644 core/src/mindustryX/features/DebugUtil.java

diff --git a/core/src/arc/graphics/g2d/MySpriteBatch.java b/core/src/arc/graphics/g2d/MySpriteBatch.java
new file mode 100644
index 0000000000000000000000000000000000000000..e2bdb30e190a210f25130c423c853892798e4c28
--- /dev/null
+++ b/core/src/arc/graphics/g2d/MySpriteBatch.java
@@ -0,0 +1,26 @@
+package arc.graphics.g2d;
+
+import arc.graphics.*;
+import mindustryX.features.*;
+
+//MDTX: add some DebugUtil count.
+public class MySpriteBatch extends SpriteBatch{
+    @Override
+    protected void flush(){
+        DebugUtil.lastFlushCount++;
+        super.flush();
+    }
+
+    @Override
+    protected void flushRequests(){
+        DebugUtil.lastVertices += requestVertOffset / 6;
+        DebugUtil.lastDrawRequests += numRequests;
+        super.flushRequests();
+    }
+
+    @Override
+    protected void switchTexture(Texture texture){
+        DebugUtil.lastSwitchTexture++;
+        super.switchTexture(texture);
+    }
+}
diff --git a/core/src/mindustry/ClientLauncher.java b/core/src/mindustry/ClientLauncher.java
index 6042c38333736e5cb7d33db2e3effa8a1e261ca5..068a243ba87023201aaf0c287e9ee35341e312a3 100644
--- a/core/src/mindustry/ClientLauncher.java
+++ b/core/src/mindustry/ClientLauncher.java
@@ -70,7 +70,7 @@ public abstract class ClientLauncher extends ApplicationCore implements Platform
         });
 
         UI.loadColors();
-        batch = new SpriteBatch();
+        batch = new MySpriteBatch();
         assets = new AssetManager();
         assets.setLoader(Texture.class, "." + mapExtension, new MapPreviewLoader());
 
diff --git a/core/src/mindustry/core/Logic.java b/core/src/mindustry/core/Logic.java
index 59f9b3cdcd0a11e30959e5f8ba2a1cbcaf472cff..788f23d4a1a3b498a0f451f90c426a1b86516e5c 100644
--- a/core/src/mindustry/core/Logic.java
+++ b/core/src/mindustry/core/Logic.java
@@ -16,6 +16,7 @@ import mindustry.type.*;
 import mindustry.type.Weather.*;
 import mindustry.world.*;
 import mindustry.world.blocks.storage.CoreBlock.*;
+import mindustryX.features.*;
 
 import java.util.*;
 
@@ -415,6 +416,7 @@ public class Logic implements ApplicationListener{
 
     @Override
     public void update(){
+        var start = Time.nanos();
         Events.fire(Trigger.update);
         universe.updateGlobal();
 
@@ -498,6 +500,7 @@ public class Logic implements ApplicationListener{
         }else if(netServer.isWaitingForPlayers() && runStateCheck){
             checkGameState();
         }
+        DebugUtil.logicTime = Time.timeSinceNanos(start);
     }
 
     /** @return whether the wave timer is paused due to enemies */
diff --git a/core/src/mindustry/ui/fragments/HudFragment.java b/core/src/mindustry/ui/fragments/HudFragment.java
index 23d4ad03c71131265f82478a0285110cdf71059d..6f8bb852edfe397c4abbbe9268f8b5648c19add3 100644
--- a/core/src/mindustry/ui/fragments/HudFragment.java
+++ b/core/src/mindustry/ui/fragments/HudFragment.java
@@ -29,6 +29,7 @@ import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.world.blocks.storage.*;
 import mindustry.world.blocks.storage.CoreBlock.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 import static mindustry.gen.Tex.*;
@@ -282,6 +283,12 @@ public class HudFragment{
 
                 info.label(() -> fps.get(Core.graphics.getFramesPerSecond())).left().style(Styles.outlineLabel).name("fps");
                 info.row();
+                info.label(() -> Strings.format("LG/DW/UI(ms) @/@/@", Time.nanosToMillis(DebugUtil.logicTime), Time.nanosToMillis(DebugUtil.rendererTime), Time.nanosToMillis(DebugUtil.uiTime)))
+                .left().style(Styles.outlineLabel).name("cpuTime");
+                info.row();
+                info.label(() -> Strings.format("D/V/T/F @/@/@/@",
+                DebugUtil.lastDrawRequests, DebugUtil.lastVertices, DebugUtil.lastSwitchTexture, DebugUtil.lastFlushCount)).left().style(Styles.outlineLabel).name("draw");
+                info.row();
 
                 if(android){
                     info.label(() -> memnative.get((int)(Core.app.getJavaHeap() / 1024 / 1024), (int)(Core.app.getNativeHeap() / 1024 / 1024))).left().style(Styles.outlineLabel).name("memory2");
diff --git a/core/src/mindustryX/Hooks.java b/core/src/mindustryX/Hooks.java
index 3d1491a497b4f3a7dad96620cdc6638376938b4d..9981f2963b730173d8c03e29440e2e9ee404d4d3 100644
--- a/core/src/mindustryX/Hooks.java
+++ b/core/src/mindustryX/Hooks.java
@@ -18,6 +18,7 @@ public class Hooks implements ApplicationListener{
         Log.infoTag("MindustryX", "Hooks.beforeInit");
         registerBundle();
         Settings.addSettings();
+        DebugUtil.init();//this is safe, and better at beforeInit,
     }
 
     /** invoke after loading, just before `Mod::init` */
diff --git a/core/src/mindustryX/features/DebugUtil.java b/core/src/mindustryX/features/DebugUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..1af11ccb664b52555d5ade24343c26ff3d6d1181
--- /dev/null
+++ b/core/src/mindustryX/features/DebugUtil.java
@@ -0,0 +1,21 @@
+package mindustryX.features;
+
+import arc.*;
+import arc.util.*;
+import mindustry.game.EventType.*;
+
+public class DebugUtil{
+    public static int lastDrawRequests, lastVertices, lastFlushCount, lastSwitchTexture;
+    public static long logicTime, rendererTime, uiTime;//nanos
+    private static long rendererStart, uiStart;//nanos
+
+    public static void init(){
+        Events.run(Trigger.preDraw, () -> {
+            lastDrawRequests = lastVertices = lastFlushCount = lastSwitchTexture = 0;
+            rendererStart = Time.nanos();
+        });
+        Events.run(Trigger.postDraw, () -> rendererTime = Time.timeSinceNanos(rendererStart));
+        Events.run(Trigger.uiDrawBegin, () -> uiStart = Time.nanos());
+        Events.run(Trigger.uiDrawEnd, () -> uiTime = Time.timeSinceNanos(uiStart));
+    }
+}

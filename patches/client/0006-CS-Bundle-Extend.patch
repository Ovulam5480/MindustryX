From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Tue, 9 Apr 2024 18:21:28 +0800
Subject: [PATCH] CS: Bundle Extend

---
 core/assets/bundles/bundle-mdtx.properties |  0
 core/src/mindustryX/Hooks.java             | 22 ++++++++++++++++++++++
 2 files changed, 22 insertions(+)
 create mode 100644 core/assets/bundles/bundle-mdtx.properties

diff --git a/core/assets/bundles/bundle-mdtx.properties b/core/assets/bundles/bundle-mdtx.properties
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/core/src/mindustryX/Hooks.java b/core/src/mindustryX/Hooks.java
index 499a9f3403c6769288ad44e7fb4a68ffb36bc591..ca6144798666f96ee074838e489b51df1a10d19d 100644
--- a/core/src/mindustryX/Hooks.java
+++ b/core/src/mindustryX/Hooks.java
@@ -1,12 +1,16 @@
 package mindustryX;
 
 import arc.*;
+import arc.files.*;
 import arc.util.*;
 
+import java.util.*;
+
 public class Hooks implements ApplicationListener{
     /** invoke before `Vars.init`. Note that may be executed from `Vars.loadAsync` */
     public static void beforeInit(){
         Log.infoTag("MindustryX", "Hooks.beforeInit");
+        registerBundle();
     }
 
     /** invoke after loading, just before `Mod::init` */
@@ -14,4 +18,22 @@ public class Hooks implements ApplicationListener{
     public void init(){
         Log.infoTag("MindustryX", "Hooks.init");
     }
+
+    private static void registerBundle(){
+        //MDTX: bundle overwrite
+        try{
+            I18NBundle originBundle = Core.bundle;
+            Fi handle = Core.files.internal("bundles/bundle-mdtx");
+            Core.bundle = I18NBundle.createBundle(handle, Locale.getDefault());
+            Reflect.set(Core.bundle, "locale", originBundle.getLocale());
+            Log.info("MDTX: bundle has been loaded.");
+            var rootBundle = Core.bundle;
+            while(rootBundle.getParent() != null){
+                rootBundle = rootBundle.getParent();
+            }
+            Reflect.set(rootBundle, "parent", originBundle);
+        }catch(Throwable e){
+            Log.err(e);
+        }
+    }
 }

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Sat, 25 May 2024 20:34:18 +0800
Subject: [PATCH] C(RenderExt) massDriverLine

---
 core/src/mindustryX/features/RenderExt.java | 27 +++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/core/src/mindustryX/features/RenderExt.java b/core/src/mindustryX/features/RenderExt.java
index 4386f5f364e847324b147c44f8c8748fd5c16537..41bb25494e541e74e1112fd24ec0bce733707f30 100644
--- a/core/src/mindustryX/features/RenderExt.java
+++ b/core/src/mindustryX/features/RenderExt.java
@@ -4,6 +4,7 @@ import arc.*;
 import arc.graphics.*;
 import arc.graphics.g2d.*;
 import arc.math.*;
+import arc.math.geom.*;
 import arc.util.*;
 import mindustry.entities.*;
 import mindustry.game.EventType.*;
@@ -13,6 +14,7 @@ import mindustry.type.*;
 import mindustry.world.*;
 import mindustry.world.blocks.defense.*;
 import mindustry.world.blocks.defense.turrets.*;
+import mindustry.world.blocks.distribution.MassDriver.*;
 import mindustry.world.blocks.logic.*;
 import mindustry.world.blocks.logic.MessageBlock.*;
 import mindustry.world.blocks.production.Drill.*;
@@ -31,8 +33,12 @@ public class RenderExt{
     public static boolean logicDisplayNoBorder, arcDrillMode;
     public static int blockRenderLevel;
     public static boolean renderSort;
+    public static boolean massDriverLine;
+    public static int massDriverLineInterval;
 
     public static boolean unitHide = false;
+    public static Color massDriverLineColor = Color.clear;
+
     private static Effect placementEffect;
 
     public static void init(){
@@ -62,6 +68,8 @@ public class RenderExt{
             arcDrillMode = Core.settings.getBool("arcdrillmode");
             blockRenderLevel = Core.settings.getInt("blockRenderLevel");
             renderSort = Core.settings.getBool("renderSort");
+            massDriverLine = Core.settings.getBool("mass_driver_line");
+            massDriverLineInterval = Core.settings.getInt("mass_driver_line_interval");
         });
         Events.run(Trigger.draw, RenderExt::draw);
         Events.on(TileChangeEvent.class, RenderExt::onSetBlock);
@@ -83,6 +91,8 @@ public class RenderExt{
             Draw.draw(Layer.overlayUI - 0.1f, build::drawSelect);
         if(arcDrillMode && build instanceof DrillBuild drill)
             arcDrillModeDraw(block, drill);
+        if(massDriverLine && build instanceof MassDriverBuild b)
+            drawMassDriverLine(b);
     }
 
     private static void placementEffect(float x, float y, float lifetime, float range, Color color){
@@ -126,4 +136,21 @@ public class RenderExt{
             Lines.arc(dx, dy, iconSize * 0.75f, eff);
         }
     }
+
+    private static void drawMassDriverLine(MassDriverBuild build){
+        if(build.waitingShooters.isEmpty()) return;
+        Draw.z(Layer.effect);
+        float x = build.x, y = build.y, size = build.block.size;
+        float sin = Mathf.absin(Time.time, 6f, 1f);
+        for(var shooter : build.waitingShooters){
+            Lines.stroke(2f, Pal.placing);
+            Drawf.dashLine(RenderExt.massDriverLineColor, shooter.x, shooter.y, x, y);
+            int slice = Mathf.floorPositive(build.dst(shooter) / RenderExt.massDriverLineInterval);
+            Vec2 interval = Tmp.v1.set(build).sub(shooter).setLength(RenderExt.massDriverLineInterval);
+            float dx = interval.x, dy = interval.y;
+            for(int i = 0; i < slice; i++){
+                Drawf.arrow(shooter.x + dx * i, shooter.y + dy * i, x, y, size * tilesize + sin, 4f + sin, RenderExt.massDriverLineColor);
+            }
+        }
+    }
 }

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Thu, 28 Mar 2024 22:21:07 +0800
Subject: [PATCH] UI: Settings
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

修复蓝图大小问题
1c8c7803 way-zer <himc.wicp@gmail.com> on 2024/4/22 at 0:35

提前Settings加载时机，优化性能
570bcd0b way-zer <himc.wicp@gmail.com> on 2024/5/3 at 14:18
---
 core/assets/bundles/bundle-mdtx.properties    | 27 ++++++
 .../ui/dialogs/SettingsMenuDialog.java        | 89 ++++++++++++++-----
 core/src/mindustryX/Hooks.java                |  2 +
 core/src/mindustryX/features/Settings.java    | 68 ++++++++++++++
 4 files changed, 162 insertions(+), 24 deletions(-)
 create mode 100644 core/src/mindustryX/features/Settings.java

diff --git a/core/assets/bundles/bundle-mdtx.properties b/core/assets/bundles/bundle-mdtx.properties
index 0cb666446175aa5e952ceaa07669e10a3a023d10..cc639cd1a79b62e9ac252efee35f01f10bfcdff7 100644
--- a/core/assets/bundles/bundle-mdtx.properties
+++ b/core/assets/bundles/bundle-mdtx.properties
@@ -40,3 +40,30 @@ stat.ammo_type = 子弹类型
 stat.ammo_capacity = 子弹容量
 
 #end StatExt
+
+# Settings
+settings.category.mindustryX = MindustryX扩展
+setting.showUpdateDialog.name = 检测到新版MindustryX时提示
+setting.githubMirror.name = GitHub镜像加速(WZ镜像)    [gray]优化全球服务器列表及Mod浏览器功能
+
+category.arcReWork.name = Arc功能重置
+setting.replayRecord.name = 多人游戏录像    [gray]自动录制游玩过程，输出在saves文件夹
+setting.menuFloatText.name = 首页悬浮文字
+setting.researchViewer.name = 科技树透视器
+setting.minimapSize.name = 小地图大小
+setting.maxSchematicSize.name = 最大蓝图大小
+
+category.blockSettings.name = 建筑相关设置
+setting.staticShieldsBorder.name = 静止力墙边界
+setting.arcTurretPlaceCheck.name = [pink]炮台[white]：范围检查
+setting.arcchoiceuiIcon.name = [acid]装卸|分类[white]：显示物品图标
+setting.HiddleItemTransparency.name = [acid]带桥/交叉器内物品[white]：不透明度
+setting.overdrive_zone.name = [acid]超速范围[white]：不透明度
+setting.arcPlacementEffect.name = [pink]建筑放置特效
+setting.blockbarminhealth.name = [acid]建筑属性显示[white]：血量最低限制
+setting.blockRenderLevel.name = [cyan]建筑渲染等级
+
+category.entitySettings.name = 实体相关设置
+setting.bulletShow.name = 显示子弹
+setting.showminebeam.name = 显示单位挖掘光束
+#end Settings
diff --git a/core/src/mindustry/ui/dialogs/SettingsMenuDialog.java b/core/src/mindustry/ui/dialogs/SettingsMenuDialog.java
index 8450dfc699ee79aa25f8e96119da50fcea1b90f9..9bc85ef9d3b45ece271aaea02dce05dc7b634b74 100644
--- a/core/src/mindustry/ui/dialogs/SettingsMenuDialog.java
+++ b/core/src/mindustry/ui/dialogs/SettingsMenuDialog.java
@@ -24,6 +24,7 @@ import mindustry.gen.*;
 import mindustry.graphics.*;
 import mindustry.input.*;
 import mindustry.ui.*;
+import mindustryX.*;
 
 import java.io.*;
 import java.util.zip.*;
@@ -49,10 +50,7 @@ public class SettingsMenuDialog extends BaseDialog{
         cont.add(main = new SettingsTable());
         shouldPause = true;
 
-        shown(() -> {
-            back();
-            rebuildMenu();
-        });
+        shown(this::back);
 
         onResize(() -> {
             graphics.rebuild();
@@ -277,12 +275,6 @@ public class SettingsMenuDialog extends BaseDialog{
         menu.button("@settings.game", Icon.settings, style, isize, () -> visible(0)).marginLeft(marg).row();
         menu.button("@settings.graphics", Icon.image, style, isize, () -> visible(1)).marginLeft(marg).row();
         menu.button("@settings.sound", Icon.filters, style, isize, () -> visible(2)).marginLeft(marg).row();
-        menu.button("@settings.language", Icon.chat, style, isize, ui.language::show).marginLeft(marg).row();
-        if(!mobile || Core.settings.getBool("keyboard")){
-            menu.button("@settings.controls", Icon.move, style, isize, ui.controls::show).marginLeft(marg).row();
-        }
-
-        menu.button("@settings.data", Icon.save, style, isize, () -> dataDialog.show()).marginLeft(marg).row();
 
         int i = 3;
         for(var cat : categories){
@@ -294,6 +286,13 @@ public class SettingsMenuDialog extends BaseDialog{
             }
             i++;
         }
+
+        menu.button("@settings.language", Icon.chat, style, isize, ui.language::show).marginLeft(marg).row();
+        if(!mobile || Core.settings.getBool("keyboard")){
+            menu.button("@settings.controls", Icon.move, style, isize, ui.controls::show).marginLeft(marg).row();
+        }
+
+        menu.button("@settings.data", Icon.save, style, isize, () -> dataDialog.show()).marginLeft(marg).row();
     }
 
     void addSettings(){
@@ -378,7 +377,7 @@ public class SettingsMenuDialog extends BaseDialog{
 
         graphics.sliderPref("screenshake", 4, 0, 8, i -> (i / 4f) + "x");
 
-        graphics.sliderPref("bloomintensity", 6, 0, 16, i -> (int)(i/4f * 100f) + "%");
+        graphics.sliderPref("bloomintensity", 6, 0, 16, i -> (int)(i / 4f * 100f) + "%");
         graphics.sliderPref("bloomblur", 2, 1, 16, i -> i + "x");
 
         graphics.sliderPref("fpscap", 240, 10, 245, 5, s -> (s > 240 ? Core.bundle.get("setting.fpscap.none") : Core.bundle.format("setting.fpscap.text", s)));
@@ -571,13 +570,13 @@ public class SettingsMenuDialog extends BaseDialog{
     private void visible(int index){
         prefs.clearChildren();
 
-        Seq<Table> tables = new Seq<>();
+        Seq<SettingsTable> tables = new Seq<>();
         tables.addAll(game, graphics, sound);
         for(var custom : categories){
             tables.add(custom.table);
         }
 
-        prefs.add(tables.get(index));
+        prefs.add(tables.get(index).rebuild2());
     }
 
     @Override
@@ -619,22 +618,39 @@ public class SettingsMenuDialog extends BaseDialog{
             table = new SettingsTable();
             builder.get(table);
         }
+
+        @MindustryXApi
+        public void rebuild(){
+            table.reset();
+            builder.get(table);
+            table.rebuild();
+        }
     }
 
     public static class SettingsTable extends Table{
         protected Seq<Setting> list = new Seq<>();
+        private int lastSize;
 
+        @Deprecated()//MDTX: recommend SettingsCategory
         public SettingsTable(){
             left();
         }
 
+        @Override
+        public void act(float delta){
+            if(lastSize != list.size){
+                lastSize = list.size;
+                rebuild();
+            }
+            super.act(delta);
+        }
+
         public Seq<Setting> getSettings(){
             return list;
         }
 
         public void pref(Setting setting){
             list.add(setting);
-            rebuild();
         }
 
         public SliderSetting sliderPref(String name, int def, int min, int max, StringProcessor s){
@@ -645,47 +661,57 @@ public class SettingsMenuDialog extends BaseDialog{
             SliderSetting res;
             list.add(res = new SliderSetting(name, def, min, max, step, s));
             settings.defaults(name, def);
-            rebuild();
+            s.get(settings.getInt(name));
             return res;
         }
 
         public void checkPref(String name, boolean def){
             list.add(new CheckSetting(name, def, null));
             settings.defaults(name, def);
-            rebuild();
         }
 
         public void checkPref(String name, boolean def, Boolc changed){
             list.add(new CheckSetting(name, def, changed));
             settings.defaults(name, def);
-            rebuild();
+            changed.get(settings.getBool(name));
+        }
+
+        public void addCategory(String name){
+            list.add(new Divider(name, bundle.get("category." + name + ".name")));
         }
 
         public void textPref(String name, String def){
             list.add(new TextSetting(name, def, null));
             settings.defaults(name, def);
-            rebuild();
         }
 
         public void textPref(String name, String def, Cons<String> changed){
             list.add(new TextSetting(name, def, changed));
             settings.defaults(name, def);
-            rebuild();
         }
 
         public void areaTextPref(String name, String def){
             list.add(new AreaTextSetting(name, def, null));
             settings.defaults(name, def);
-            rebuild();
         }
 
         public void areaTextPref(String name, String def, Cons<String> changed){
             list.add(new AreaTextSetting(name, def, changed));
             settings.defaults(name, def);
-            rebuild();
+        }
+
+        public void reset(){
+            clearChildren();
+            list.clear();
         }
 
         public void rebuild(){
+            rebuild2();
+        }
+
+        @MindustryXApi//return Table
+        public Table rebuild2(){
+            if(list.isEmpty()) return this;
             clearChildren();
 
             for(Setting setting : list){
@@ -699,6 +725,7 @@ public class SettingsMenuDialog extends BaseDialog{
                 }
                 rebuild();
             }).margin(14).width(240f).pad(6);
+            return this;
         }
 
         public abstract static class Setting{
@@ -787,6 +814,20 @@ public class SettingsMenuDialog extends BaseDialog{
             }
         }
 
+        public static class Divider extends Setting{
+
+            Divider(String name, String title){
+                super(name);
+                this.title = title;
+            }
+
+            @Override
+            public void add(SettingsTable table){
+                table.add(title).color(Pal.accent).colspan(4).pad(10).padTop(15).padBottom(4).row();
+                table.image().color(Pal.accent).fillX().height(3).colspan(4).padTop(0).padBottom(10).row();
+            }
+        }
+
         public static class TextSetting extends Setting{
             String def;
             Cons<String> changed;
@@ -810,9 +851,9 @@ public class SettingsMenuDialog extends BaseDialog{
                     }
                 });
 
-                Table prefTable = table.table().left().padTop(3f).get();
-                prefTable.add(field);
-                prefTable.label(() -> title);
+                Table prefTable = table.table().left().padTop(3f).fillX().get();
+                prefTable.label(() -> title).padRight(8f);
+                prefTable.add(field).growX();
                 addDesc(prefTable);
                 table.row();
             }
diff --git a/core/src/mindustryX/Hooks.java b/core/src/mindustryX/Hooks.java
index 27bf6d34b21c289a516ecc94e1cc13bfbfbdfd2a..eccd7532122ec7461e24202230a6300c3e027249 100644
--- a/core/src/mindustryX/Hooks.java
+++ b/core/src/mindustryX/Hooks.java
@@ -5,6 +5,7 @@ import arc.util.*;
 import mindustry.*;
 import mindustry.gen.*;
 import mindustryX.features.*;
+import mindustryX.features.Settings;
 
 import java.net.*;
 
@@ -12,6 +13,7 @@ public class Hooks implements ApplicationListener{
     /** invoke before `Vars.init`. Note that may be executed from `Vars.loadAsync` */
     public static void beforeInit(){
         Log.infoTag("MindustryX", "Hooks.beforeInit");
+        Settings.addSettings();
     }
 
     /** invoke after loading, just before `Mod::init` */
diff --git a/core/src/mindustryX/features/Settings.java b/core/src/mindustryX/features/Settings.java
new file mode 100644
index 0000000000000000000000000000000000000000..62e961ec7066c2051c8e5217cefdd9001c1fa764
--- /dev/null
+++ b/core/src/mindustryX/features/Settings.java
@@ -0,0 +1,68 @@
+package mindustryX.features;
+
+import arc.*;
+import arc.func.*;
+import arc.scene.style.*;
+import arc.struct.*;
+import mindustry.*;
+import mindustry.game.EventType.*;
+import mindustry.gen.*;
+import mindustry.ui.dialogs.SettingsMenuDialog.*;
+
+import static mindustry.Vars.maxSchematicSize;
+
+public class Settings{
+    public static class LazySettingsCategory extends SettingsCategory{
+        private final Prov<Drawable> iconProv;
+
+        public LazySettingsCategory(String name, Prov<Drawable> icon, Cons<SettingsTable> builder){
+            super(name, null, builder);
+            iconProv = icon;
+        }
+
+        public void init(){
+            icon = iconProv.get();
+        }
+    }
+
+    public static final Seq<LazySettingsCategory> categories = new Seq<>();
+
+    public static void addSettings(){
+        categories.add(new LazySettingsCategory("@settings.category.mindustryX", () -> Icon.box, (c) -> {
+            c.checkPref("showUpdateDialog", true);
+            c.checkPref("githubMirror", false);
+
+            c.addCategory("arcReWork");
+            c.checkPref("replayRecord", false);
+            c.checkPref("menuFloatText", true);
+            c.checkPref("researchViewer", false);
+            c.sliderPref("minimapSize", 140, 40, 400, 10, i -> i + "");
+            c.sliderPref("maxSchematicSize", 64, 64, 257, 1, v -> {
+                maxSchematicSize = v == 257 ? Integer.MAX_VALUE : v;
+                return v == 257 ? "无限" : String.valueOf(v);
+            });
+
+            c.addCategory("blockSettings");
+            c.checkPref("staticShieldsBorder", false);
+            c.checkPref("arcTurretPlaceCheck", false);
+            c.checkPref("arcchoiceuiIcon", false);
+            c.sliderPref("HiddleItemTransparency", 0, 0, 100, 2, i -> i > 0 ? i + "%" : "关闭");
+            c.sliderPref("overdrive_zone", 0, 0, 100, 2, i -> i > 0 ? i + "%" : "关闭");
+            c.checkPref("arcPlacementEffect", false);
+            c.sliderPref("blockbarminhealth", 0, 0, 4000, 50, i -> i + "[red]HP");
+            c.sliderPref("blockRenderLevel", 2, 0, 2, 1, s -> switch(s){
+                case 0 -> "隐藏全部建筑";
+                case 1 -> "只显示建筑状态";
+                default -> "全部显示";
+            });
+
+            c.addCategory("entitySettings");
+            c.checkPref("bulletShow", true);
+            c.checkPref("showMineBeam".toLowerCase(), true);
+        }));
+        Events.on(ClientLoadEvent.class, e -> {
+            categories.each(LazySettingsCategory::init);
+            Vars.ui.settings.getCategories().addAll(categories);
+        });
+    }
+}

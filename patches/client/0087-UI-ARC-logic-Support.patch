From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Sat, 13 Jul 2024 00:12:04 +0800
Subject: [PATCH] =?UTF-8?q?UI&ARC:=20logic=20Support=20=E5=A4=84=E7=90=86?=
 =?UTF-8?q?=E5=99=A8=E7=BC=96=E8=BE=91=E5=A2=9E=E5=BC=BA?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

* 从Merged分离
* 修复注释切换功能；整理代码
* 实现JUMP跳转按钮
way-zer <himc.wicp@gmail.com> on 2024/7/13

重制内存元显示 和 处理器快捷显示
way-zer <himc.wicp@gmail.com> on 2024/7/14
---
 core/src/mindustry/logic/LCanvas.java         |  54 +++-
 core/src/mindustry/logic/LExecutor.java       |  19 +-
 core/src/mindustry/logic/LStatements.java     |  12 +
 core/src/mindustry/logic/LogicDialog.java     | 237 +++++++++++++++---
 .../world/blocks/logic/LogicBlock.java        |  49 +++-
 .../world/blocks/logic/MemoryBlock.java       |  52 ++++
 6 files changed, 371 insertions(+), 52 deletions(-)

diff --git a/core/src/mindustry/logic/LCanvas.java b/core/src/mindustry/logic/LCanvas.java
index 04871c02fbee810619980a87a36a5f60a9a5d43a..6f155e70c3a59c60517878d48372fe94da087dcc 100644
--- a/core/src/mindustry/logic/LCanvas.java
+++ b/core/src/mindustry/logic/LCanvas.java
@@ -18,6 +18,8 @@ import mindustry.gen.*;
 import mindustry.graphics.*;
 import mindustry.logic.LStatements.*;
 import mindustry.ui.*;
+import mindustryX.*;
+import mindustryX.features.*;
 
 public class LCanvas extends Table{
     public static final int maxJumpsDrawn = 100;
@@ -58,7 +60,7 @@ public class LCanvas extends Table{
 
     /** @return if statement elements should have rows. */
     public static boolean useRows(){
-        return Core.graphics.getWidth() < Scl.scl(900f) * 1.2f;
+        return Core.graphics.getWidth() - (Core.settings.getBool("logicSupport") ? 400f : 0f) < Scl.scl(900f) * 1.2f;
     }
 
     public static void tooltip(Cell<?> cell, String key){
@@ -351,14 +353,23 @@ public class LCanvas extends Table{
 
                 addressLabel = t.add(index + "").style(Styles.outlineLabel).color(color).padRight(8).get();
 
-                t.button(Icon.copy, Styles.logici, () -> {
-                }).size(24f).padRight(6).get().tapped(this::copy);
+                t.button(Icon.add, Styles.logici, () -> LogicDialog.showAddStatement(privileged, (it) -> {
+                    statements.addChildAfter(this, new StatementElem(it));
+                    statements.layout();
+                })).size(24f).padRight(6)
+                .get().tapped(()->{});//no drag
+
+                t.button(Icon.copy, Styles.logici, this::copy).size(24f).padRight(6)
+                .get().tapped(()->{});
+
+                t.button(st instanceof PrintStatement ? Icon.fileText : Icon.pencil, Styles.logici, this::toggleComment).size(24f).padRight(6)
+                .get().tapped(()->{});
 
                 t.button(Icon.cancel, Styles.logici, () -> {
                     remove();
                     dragging = null;
                     statements.layout();
-                }).size(24f);
+                }).size(24f).padLeft(Vars.mobile?48:0);
 
                 t.addListener(new InputListener(){
                     float lastx, lasty;
@@ -436,6 +447,39 @@ public class LCanvas extends Table{
             }
         }
 
+        //原始作者: LC
+        @MindustryXApi
+        public void toggleComment(){
+            StatementElem newElem;
+            if(st instanceof PrintStatement pst){ //print->代码
+                String code = pst.value.replace("_", " ");
+                Seq<LStatement> lsStatement = LAssembler.read(code, privileged);
+                LStatement stNew = lsStatement.first();
+                if(stNew instanceof InvalidStatement){
+                    UIExt.announce("[orange]警告：转换失败，请输入正确格式");
+                    return;
+                }
+                newElem = new StatementElem(stNew);
+            }else{  //代码->print
+                st.saveUI();
+                StringBuilder thisText = new StringBuilder();
+                LogicIO.write(st, thisText);
+                var stNew = new PrintStatement();
+                stNew.value = thisText.toString();
+                newElem = new StatementElem(stNew);
+            }
+            statements.addChildBefore(this, newElem);
+            remove();
+            for(Element c : statements.getChildren()){
+                if(c instanceof StatementElem ste && ste.st instanceof JumpStatement jst && (jst.dest == null || jst.dest == st.elem)){
+                    if(0 > jst.destIndex || jst.destIndex >= statements.getChildren().size) continue;
+                    jst.dest = (StatementElem)statements.getChildren().get(jst.destIndex);
+                }
+            }
+            statements.layout();
+        }
+
+
         @Override
         public void draw(){
             float pad = 5f;
@@ -584,7 +628,7 @@ public class LCanvas extends Table{
             float dist = 100f;
 
             //square jumps
-            if(false){
+            if(Core.settings.getBool("rectJumpLine")){
                 float len = Scl.scl(Mathf.randomSeed(hashCode(), 10, 50));
 
                 float maxX = Math.max(x, x2) + len;
diff --git a/core/src/mindustry/logic/LExecutor.java b/core/src/mindustry/logic/LExecutor.java
index 8ccfd4627f296b5cd2058fb11ab6f1ab92a41a7c..51477ab08f78a14682ce4940195f9a4931e546ed 100644
--- a/core/src/mindustry/logic/LExecutor.java
+++ b/core/src/mindustry/logic/LExecutor.java
@@ -9,6 +9,7 @@ import arc.util.*;
 import mindustry.*;
 import mindustry.ai.types.*;
 import mindustry.annotations.Annotations.*;
+import mindustryX.features.ui.ArcMessageDialog;
 import mindustry.content.*;
 import mindustry.core.*;
 import mindustry.ctype.*;
@@ -30,6 +31,7 @@ import mindustry.world.blocks.logic.MemoryBlock.*;
 import mindustry.world.blocks.logic.MessageBlock.*;
 import mindustry.world.blocks.payloads.*;
 import mindustry.world.meta.*;
+import mindustryX.features.ui.ArcMessageDialog.*;
 
 import static mindustry.Vars.*;
 
@@ -45,9 +47,9 @@ public class LExecutor{
     public LInstruction[] instructions = {};
     /** Non-constant variables used for network sync */
     public LVar[] vars = {};
-    
+
     public LVar counter, unit, thisv, ipt;
-    
+
     public int[] binds;
     public boolean yield;
 
@@ -501,6 +503,7 @@ public class LExecutor{
         public void run(LExecutor exec){
             Object obj = target.obj();
             if(obj instanceof Building b && (exec.privileged || (b.team == exec.team && exec.linkIds.contains(b.id)))){
+                b.lastLogicController = exec.build;
 
                 if(type == LAccess.enabled && !p1.bool()){
                     b.lastDisabler = exec.build;
@@ -1192,7 +1195,7 @@ public class LExecutor{
         @Override
         public void run(LExecutor exec){
             if(headless) return;
-
+            if(Core.settings.getBool("removeLogicLock"))return;
             switch(action){
                 case pan -> {
                     control.input.logicCutscene = true;
@@ -1624,8 +1627,14 @@ public class LExecutor{
             }
 
             switch(type){
-                case notify -> ui.hudfrag.showToast(Icon.info, text);
-                case announce -> ui.announce(text, duration.numf());
+                case notify -> {
+                    ui.hudfrag.showToast(Icon.info, text);
+                    ArcMessageDialog.addMsg(new Msg(Type.logicNotify,text).sendMessage());
+                }
+                case announce -> {
+                    ui.announce(text, duration.numf());
+                    ArcMessageDialog.addMsg(new Msg(Type.logicAnnounce,text).sendMessage());
+                }
                 case toast -> ui.showInfoToast(text, duration.numf());
                 //TODO desync?
                 case mission -> state.rules.mission = text;
diff --git a/core/src/mindustry/logic/LStatements.java b/core/src/mindustry/logic/LStatements.java
index 9884b9846f06a48c4596ffa5f29f59279b3c21b7..256792039c9471b7ae130d07070e86e3b9766db6 100644
--- a/core/src/mindustry/logic/LStatements.java
+++ b/core/src/mindustry/logic/LStatements.java
@@ -21,6 +21,7 @@ import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.world.meta.*;
 import mindustryX.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 import static mindustry.logic.LCanvas.*;
@@ -881,6 +882,17 @@ public class LStatements{
             table.table(this::rebuild);
 
             table.add().growX();
+            if(!mobile || !Core.graphics.isPortrait()){
+                table.button("JUMP", () -> {
+                    if(dest == null) return;
+                    //table, elem, dragLayout, table(y), scrollPane
+                    var canvas = dest.parent.parent;
+                    var scroll = (ScrollPane)canvas.parent;
+                    scroll.setScrollY(scroll.getMaxY() - dest.y + scroll.getHeight() * 0.5f);
+                    saveUI();
+                    UIExt.announce("[gold]跳转行号:[] " + destIndex);
+                });
+            }
             table.add(new JumpButton(() -> dest, s -> dest = s)).size(30).right().padLeft(-8);
 
             String name = name();
diff --git a/core/src/mindustry/logic/LogicDialog.java b/core/src/mindustry/logic/LogicDialog.java
index d36a66ee6b5f32938f8f8e6e4cec2e3bf3103a37..0428aae26c9151b78ad3d4b2257300a6e5cbc22d 100644
--- a/core/src/mindustry/logic/LogicDialog.java
+++ b/core/src/mindustry/logic/LogicDialog.java
@@ -4,6 +4,7 @@ import arc.*;
 import arc.func.*;
 import arc.graphics.*;
 import arc.scene.actions.*;
+import arc.scene.event.*;
 import arc.scene.ui.*;
 import arc.scene.ui.TextButton.*;
 import arc.scene.ui.layout.*;
@@ -18,6 +19,9 @@ import mindustry.logic.LStatements.*;
 import mindustry.ui.*;
 import mindustry.ui.dialogs.*;
 import mindustry.world.blocks.logic.*;
+import mindustryX.*;
+import mindustryX.features.*;
+import mindustryX.features.Settings;
 
 import static mindustry.Vars.*;
 import static mindustry.logic.LCanvas.*;
@@ -26,6 +30,10 @@ public class LogicDialog extends BaseDialog{
     public LCanvas canvas;
     Cons<String> consumer = s -> {};
     boolean privileged;
+    private static float period = 15f;
+    Table varTable = new Table();
+    private static boolean refreshing = true, doRefresh, noSave;
+
     @Nullable LExecutor executor;
     GlobalVarsDialog globalsDialog = new GlobalVarsDialog();
 
@@ -40,19 +48,153 @@ public class LogicDialog extends BaseDialog{
         addCloseListener();
 
         shown(this::setup);
-        hidden(() -> consumer.get(canvas.save()));
+        hidden(() -> {
+            if(!noSave){
+                consumer.get(canvas.save());
+            } else {
+                noSave = false;
+            }});
         onResize(() -> {
             setup();
             canvas.rebuild();
+            buildVarsTable();
         });
 
         add(canvas).grow().name("canvas");
+        addChild(new Table(t->{
+            t.name = "vars";
+            t.setFillParent(true);
+            t.center().left().add(varTable).growY().visible(() -> Core.settings.getBool("logicSupport"));
+            Interval interval = new Interval();
+            varTable.update(() -> {
+                if(!varTable.hasChildren()) buildVarsTable();
+                doRefresh = refreshing && interval.get(period);
+            });
+        }));
 
         row();
 
         add(buttons).growX().name("canvas");
     }
 
+    private void buildVarsTable(){
+        varTable.clear();
+        varTable.table(t->{
+            t.table(tt->{
+                tt.add("刷新间隔").padRight(5f).left();
+                TextField field = tt.field((int)period + "", text -> {
+                    period = Integer.parseInt(text);
+                }).width(100f).valid(Strings::canParsePositiveInt).maxTextLength(5).get();
+                tt.slider(1, 60,1, period, res -> {
+                    period = res;
+                    field.setText((int)res + "");
+                });
+            });
+            t.row();
+            t.table(tt -> {
+                tt.button(Icon.refreshSmall, Styles.cleari, () -> {
+                    executor.build.updateCode(executor.build.code);
+                    buildVarsTable();
+                    UIExt.announce("[orange]已更新逻辑显示！");
+                }).size(50f);
+                tt.button(Icon.pauseSmall, Styles.cleari, () -> {
+                    refreshing = !refreshing;
+                    String text = "[orange]已" + (refreshing ? "开启" : "关闭") + "逻辑刷新";
+                    UIExt.announce(text);
+                }).checked(refreshing).size(50f);
+                tt.button(Icon.rightOpenOutSmall, Styles.cleari, () -> {
+                    Core.settings.put("rectJumpLine", !Core.settings.getBool("rectJumpLine"));
+                    String text = "[orange]已" + (refreshing ? "开启" : "关闭") + "方形跳转线";
+                    UIExt.announce(text);
+                    this.canvas.rebuild();
+                }).checked(refreshing).size(50f);
+
+                tt.button(Icon.playSmall, Styles.cleari, () -> {
+                    if (state.isPaused()) state.set(State.playing);
+                    else state.set(State.paused);
+                    String text = state.isPaused() ? "已暂停" : "已继续游戏";
+                    UIExt.announce(text);
+                }).checked(state.isPaused()).size(50f);
+            });
+        });
+        varTable.row();
+            varTable.pane(t->{
+                if(executor==null) return;
+                for(var s : executor.vars){
+                    if(s.name.startsWith("___")) continue;
+                    String text = arcVarsText(s);
+                    t.table(tt->{
+                        tt.background(Tex.whitePane);
+
+                        tt.table(tv->{
+                            tv.labelWrap(s.name).width(100f);
+                            tv.touchable = Touchable.enabled;
+                            tv.tapped(()->{
+                                Core.app.setClipboardText(s.name);
+                                UIExt.announce("[cyan]复制变量名[white]\n " + s.name);
+                            });
+                        });
+                        tt.table(tv->{
+                            Label varPro = tv.labelWrap(text).width(200f).get();
+                            tv.touchable = Touchable.enabled;
+                            tv.tapped(()->{
+                                Core.app.setClipboardText(varPro.getText().toString());
+                                String text1 = "[cyan]复制变量属性[white]\n " + varPro.getText();
+                                UIExt.announce(text1);
+                            });
+                            tv.update(()->{
+                                if(doRefresh){
+                                    varPro.setText(arcVarsText(s));
+                                }
+                            });
+                        }).padLeft(20f);
+
+                        tt.update(()->{
+                            if(doRefresh){
+                                tt.setColor(arcVarsColor(s));
+                            }
+                        });
+
+                    }).padTop(10f).row();
+                }
+                t.table(tt->{
+                    tt.background(Tex.whitePane);
+
+                    tt.table(tv->{
+                        Label varPro = tv.labelWrap(executor.textBuffer.toString()).width(300f).get();
+                        tv.touchable = Touchable.enabled;
+                        tv.tapped(()->{
+                            Core.app.setClipboardText(varPro.getText().toString());
+                            String text = "[cyan]复制信息版[white]\n " + varPro.getText();
+                            UIExt.announce(text);
+                        });
+                        tv.update(()->{
+                            if(doRefresh){
+                                varPro.setText(executor.textBuffer.toString());
+                            }
+                        });
+                    }).padLeft(20f);
+
+                    tt.update(()->{
+                        if(doRefresh){
+                            tt.setColor(Color.valueOf("#e600e6"));
+                        }
+                    });
+
+                }).padTop(10f).row();
+            }).width(400f).padLeft(20f);
+    }
+
+    public static String arcVarsText(LVar s){
+        return s.isobj ? PrintI.toString(s.objval) : Math.abs(s.numval - (long)s.numval) < 0.00001 ? (long)s.numval + "" : s.numval + "";
+    }
+
+    public static Color arcVarsColor(LVar s){
+        if(s.constant && s.name.startsWith("@")) return Color.goldenrod;
+        else if (s.constant) return Color.valueOf("00cc7e");
+        else return typeColor(s,new Color());
+    }
+
     public static Color typeColor(LVar s, Color color){
         return color.set(
             !s.isobj ? Pal.place :
@@ -124,6 +266,17 @@ public class LogicDialog extends BaseDialog{
                             ui.showException(e);
                         }
                     }).marginLeft(12f).disabled(b -> Core.app.getClipboardText() == null);
+                    t.row();
+                    t.button("[orange]丢弃更改", Icon.cancel,style, () -> ui.showConfirm("确认丢弃?", () -> {
+                        noSave = true;
+                        dialog.hide();
+                        hide();
+                    })).marginLeft(12f);
+                    t.row();
+                    t.button("[orange]逻辑辅助器", Icon.settings, style, () -> {
+                        Settings.toggle("logicSupport");
+                        dialog.hide();
+                    }).marginLeft(12f);
                 });
             });
 
@@ -204,54 +357,60 @@ public class LogicDialog extends BaseDialog{
         }).name("variables").disabled(b -> executor == null || executor.vars.length == 0);
 
         buttons.button("@add", Icon.add, () -> {
-            BaseDialog dialog = new BaseDialog("@add");
-            dialog.cont.table(table -> {
-                table.background(Tex.button);
-                table.pane(t -> {
-                    for(Prov<LStatement> prov : LogicIO.allStatements){
-                        LStatement example = prov.get();
-                        if(example instanceof InvalidStatement || example.hidden() || (example.privileged() && !privileged) || (example.nonPrivileged() && privileged)) continue;
-
-                        LCategory category = example.category();
-                        Table cat = t.find(category.name);
-                        if(cat == null){
-                            t.table(s -> {
-                                if(category.icon != null){
-                                    s.image(category.icon, Pal.darkishGray).left().size(15f).padRight(10f);
-                                }
-                                s.add(category.localized()).color(Pal.darkishGray).left().tooltip(category.description());
-                                s.image(Tex.whiteui, Pal.darkishGray).left().height(5f).growX().padLeft(10f);
-                            }).growX().pad(5f).padTop(10f);
+            showAddStatement(privileged, (t) -> canvas.add(t));
+        }).disabled(t -> canvas.statements.getChildren().size >= LExecutor.maxInstructions);
+    }
 
-                            t.row();
+    @MindustryXApi
+    public static void showAddStatement(boolean privileged, Cons<LStatement> cons){
+        BaseDialog dialog = new BaseDialog("@add");
+        dialog.cont.table(table -> {
+            table.background(Tex.button);
+            table.pane(t -> {
+                for(Prov<LStatement> prov : LogicIO.allStatements){
+                    LStatement example = prov.get();
+                    if(example instanceof InvalidStatement || example.hidden() || (example.privileged() && !privileged) || (example.nonPrivileged() && privileged)) continue;
+
+                    LCategory category = example.category();
+                    Table cat = t.find(category.name);
+                    if(cat == null){
+                        t.table(s -> {
+                            if(category.icon != null){
+                                s.image(category.icon, Pal.darkishGray).left().size(15f).padRight(10f);
+                            }
+                            s.add(category.localized()).color(Pal.darkishGray).left().tooltip(category.description());
+                            s.image(Tex.whiteui, Pal.darkishGray).left().height(5f).growX().padLeft(10f);
+                        }).growX().pad(5f).padTop(10f);
 
-                            cat = t.table(c -> {
-                                c.top().left();
-                            }).name(category.name).top().left().growX().fillY().get();
-                            t.row();
-                        }
+                        t.row();
 
-                        TextButtonStyle style = new TextButtonStyle(Styles.flatt);
-                        style.fontColor = category.color;
-                        style.font = Fonts.outline;
+                        cat = t.table(c -> {
+                            c.top().left();
+                        }).name(category.name).top().left().growX().fillY().get();
+                        t.row();
+                    }
 
-                        cat.button(example.name(), style, () -> {
-                            canvas.add(prov.get());
-                            dialog.hide();
-                        }).size(130f, 50f).self(c -> tooltip(c, "lst." + example.name())).top().left();
+                    TextButtonStyle style = new TextButtonStyle(Styles.flatt);
+                    style.fontColor = category.color;
+                    style.font = Fonts.outline;
 
-                        if(cat.getChildren().size % 3 == 0) cat.row();
-                    }
-                }).grow();
-            }).fill().maxHeight(Core.graphics.getHeight() * 0.8f);
-            dialog.addCloseButton();
-            dialog.show();
-        }).disabled(t -> canvas.statements.getChildren().size >= LExecutor.maxInstructions);
+                    cat.button(example.name(), style, () -> {
+                        cons.get(prov.get());
+                        dialog.hide();
+                    }).size(130f, 50f).self(c -> tooltip(c, "lst." + example.name())).top().left();
+
+                    if(cat.getChildren().size % 3 == 0) cat.row();
+                }
+            }).grow();
+        }).fill().maxHeight(Core.graphics.getHeight() * 0.8f);
+        dialog.addCloseButton();
+        dialog.show();
     }
 
     public void show(String code, LExecutor executor, boolean privileged, Cons<String> modified){
         this.executor = executor;
         this.privileged = privileged;
+        varTable.clearChildren();
         canvas.statements.clearChildren();
         canvas.rebuild();
         canvas.privileged = privileged;
diff --git a/core/src/mindustry/world/blocks/logic/LogicBlock.java b/core/src/mindustry/world/blocks/logic/LogicBlock.java
index 261b6374360c2cbae88f44aa441f55706c181936..b34e84904c0dff843f0d962c3661f0ddc961762f 100644
--- a/core/src/mindustry/world/blocks/logic/LogicBlock.java
+++ b/core/src/mindustry/world/blocks/logic/LogicBlock.java
@@ -27,6 +27,7 @@ import mindustry.world.blocks.ConstructBlock.*;
 import mindustry.world.meta.*;
 import mindustryX.*;
 import mindustryX.events.*;
+import mindustryX.features.*;
 
 import java.io.*;
 import java.util.zip.*;
@@ -114,7 +115,7 @@ public class LogicBlock extends Block{
     }
 
     public boolean accessible(){
-        return !privileged || state.rules.editor || state.playtestingMap != null;
+        return !privileged || state.rules.editor || state.playtestingMap != null || RenderExt.showOtherInfo;
     }
 
     @Override
@@ -260,6 +261,8 @@ public class LogicBlock extends Block{
         public @Nullable String tag;
         public char iconTag;
 
+        private static boolean showVars = false;
+
         /** Block of code to run after load. */
         public @Nullable Runnable loadBlock;
 
@@ -583,10 +586,12 @@ public class LogicBlock extends Block{
             }
 
             //draw top text on separate layer
+            //draw link order
+            int i = 0;
             for(LogicLink l : links){
                 Building build = world.build(l.x, l.y);
                 if(l.active && validLink(build)){
-                    build.block.drawPlaceText(l.name, build.tileX(), build.tileY(), true);
+                    build.block.drawPlaceText(l.name + "[" + i++ + "]", build.tileX(), build.tileY(), true);
                 }
             }
         }
@@ -645,7 +650,45 @@ public class LogicBlock extends Block{
 
         @Override
         public void buildConfiguration(Table table){
-            table.button(Icon.pencil, Styles.cleari, this::showEditDialog).size(40);
+            table.setBackground(Styles.black3);
+            Table vars = new Table();
+            table.table(t -> {
+                t.button(Icon.pencil, Styles.cleari, this::showEditDialog).size(40);
+                t.button(Icon.copy, Styles.cleari, () -> {
+                    Core.app.setClipboardText(code);
+                    UIExt.announce("已复制逻辑");
+                }).size(40);
+                t.button(Icon.download, Styles.cleari, () -> {
+                    updateCode(Core.app.getClipboardText().replace("\r\n", "\n"));
+                    UIExt.announce("已导入逻辑(仅单机生效)");
+                }).size(40);
+                t.button(Icon.info, Styles.cleari, () -> {
+                    showVars = !showVars;
+                    vars.clear();
+                    if(showVars) buildVarsTable(vars);
+                    table.pack();
+                }).size(40);
+            });
+            table.row().pane(vars).pad(4).maxHeight(400f);
+            if(showVars) buildVarsTable(vars);
+        }
+
+        private void buildVarsTable(Table table){
+            final var vars = executor.vars;
+            table.update(() -> {
+                if(vars != executor.vars){
+                    table.clear();
+                    buildVarsTable(table);
+                }
+            });
+
+            table.setColor(Color.lightGray);
+            for(var s : vars){
+                if(s.name.startsWith("___")) continue;
+                table.add(s.name).color(LogicDialog.arcVarsColor(s)).align(Align.left);
+                table.label(() -> LogicDialog.arcVarsText(s)).align(Align.right);
+                table.row();
+            }
         }
 
         public void showEditDialog(){
diff --git a/core/src/mindustry/world/blocks/logic/MemoryBlock.java b/core/src/mindustry/world/blocks/logic/MemoryBlock.java
index 37a6c2af615665c5179c6df5d57e053a07ce4c72..f8e4227441a914b575b978d68bf4573fade63a7d 100644
--- a/core/src/mindustry/world/blocks/logic/MemoryBlock.java
+++ b/core/src/mindustry/world/blocks/logic/MemoryBlock.java
@@ -1,9 +1,16 @@
 package mindustry.world.blocks.logic;
 
+import arc.*;
+import arc.graphics.Color;
+import arc.scene.event.*;
+import arc.scene.ui.layout.Table;
 import arc.util.io.*;
 import mindustry.gen.*;
+import mindustry.ui.Styles;
 import mindustry.world.*;
 import mindustry.world.meta.*;
+import mindustryX.features.*;
+import mindustryX.features.ui.*;
 
 import static mindustry.Vars.*;
 
@@ -18,6 +25,7 @@ public class MemoryBlock extends Block{
         drawDisabled = false;
         envEnabled = Env.any;
         canOverdrive = false;
+        configurable = true;
     }
 
     @Override
@@ -38,6 +46,8 @@ public class MemoryBlock extends Block{
 
     public class MemoryBuild extends Building{
         public double[] memory = new double[memoryCapacity];
+        private static int numPerRow = 10;
+        private static final Format format = new Format(0, true);
 
         //massive byte size means picking up causes sync issues
         @Override
@@ -71,6 +81,48 @@ public class MemoryBlock extends Block{
             }
         }
 
+        @Override
+        public void buildConfiguration(Table table){
+            if(!RenderExt.showOtherInfo && !accessible()){
+                //go away
+                deselect();
+                return;
+            }
+
+            Table vars = new Table();
+            table.background(Styles.black3);
+            table.table(t -> {
+                t.add("每行 " + numPerRow).get();
+                t.slider(2, 15, 1, numPerRow, res -> {
+                    numPerRow = (int)res;
+                    vars.clear();
+                    buildVarsPane(vars);
+                    table.pack();
+                });
+
+                t.add("保留小数: ");
+                t.slider(0, 8, 1, format.getDecimal(), res -> format.setDecimal((int)res));
+            }).row();
+            table.pane(vars).maxWidth(1000f).maxHeight(500f).pad(4);
+
+            buildVarsPane(vars);
+        }
+
+        public void buildVarsPane(Table t){
+            for(int i = 0; i < memory.length; i++){
+                int finalI = i;
+                t.add("" + i).color(Color.lightGray);
+                t.label(() -> format.format((float)memory[finalI])).padLeft(8)
+                .touchable(Touchable.enabled).get().tapped(() -> {
+                    Core.app.setClipboardText(memory[finalI] + "");
+                    UIExt.announce("[cyan]复制内存[white]\n " + memory[finalI]);
+                });
+                if((i + 1) % numPerRow == 0) t.row();
+                else t.add("|").color(((i % numPerRow) % 2 == 0) ? Color.cyan : Color.acid)
+                .padLeft(12).padRight(12);
+            }
+        }
+
         @Override
         public void read(Reads read, byte revision){
             super.read(read, revision);
